/// <summary>
/// Generated by (c) Ispirer SQLWays 10.22.11 Build 7237 64bit Licensed to Atos - Rajendra Sowani - India - Ispirer Toolkit 10 COBOL to CS Application Migration Demo License (10000 LOC, 11 Days, 20221118)
/// Timestamp: Fri Nov 11 19:53:30 2022
/// </summary>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using System.Data;
using System.IO;
using AdditionalClasses;
using Records.BRDMVS;
namespace Customer_source
{
	public partial class Brdmvs
	{
		private Compatibility BrdmvsCompatibility;
		private FileDescriptionResult fileDescriptionResult;
		/*
		      ******************************************************************
		      *REMARKS.                                                        *
		      *  THE PURPOSE OF THIS PROGRAM IS TO PRODUCE THE MEDICARE        *
		      *  OUTPATIENT MULTIPLE MEDICAL VISIT-SAME-DAY REPORT.            *
		      *  ONLY ACCOUNTS WITH A FINANCIAL CLASS OF 01 AND 02 WILL BE     *
		      *  SHOWN.  IF THE OUTPATIENT CHARGES TOTAL ZERO, THE PATIENT     *
		      *  WILL NOT BE SHOWN ON THE REPORT.                              *
		      *                                                                *
		      *----------------------------------------------------------------*
		      *  MODIFICATION LOG.                                             *
		      *----------------------------------------------------------------*
		      * PWR10040  CGPA002708       J. EGAN                             *
		      *      NEW IMPLEMENTATION.                                       *
		      * PNR161432 CGPA002832       J. EGAN  08/23/00                   *
		      *      REPLACED ENTERED-DT WITH ADMIT-DT IN FIRST CURSOR         *
		      * PWR12671  CGPA003513       J. DUDLEY  05/04/01                 *
		      *      ADD NEW SECTION TO THE REPORT TO HANDLE 'OVERLAPPING      *
		      *      OUTPATIENT REGISTRATIONS'.  THIS SECTION WILL INCLUDE     *
		      *      ANY NEW REGISTRATION WHEN THE SAME PATIENT HAS ANOTHER    *
		      *      OUTPATIENT ACCOUNT THAT IS NOT DISCHARGED.  IT WILL NOT   *
		      *      REQUIRE THE PRESENCE OF CHARGES FOR AN ACCOUNT TO         *
		      *      QUALIFY.                                                  *
		      *           CGPA  3817       J. DUDLEY  08/16/01                 *
		      *      MODIFY TO BYPASS ACCOUNTS WITH STATUS 'AX'(REESTABLISHED).*
		      *      ACCOUNTS IN THIS STATUS SHOULD NOT BE INCLUDED ON THIS    *
		      *      REPORT.  IF A LARGE NUMBER OF ACCOUNTS ARE REESTABLISHED  *
		      *      ON THE SAME DAY, INCLUDING THEM IN THE SELECTION CRITERIA *
		      *      CAUSES THIS PROGRAM TO RUN FOR AN EXCESSIVE LENGTH OF     *
		      *      TIME.                                                     *
		      *                                                                *
		      * CO 10363  CGPA004884       T. RATAN   12/12/03                 *
		      *                                                                *
		      *      MODIFIED TO CORRECT A SCENARIO WHERE THERE ARE 3 PATIENTS *
		      *      AND ALL 3 PATIENTS HAVE ENTERED DATE AND DISCHARGE DATE   *
		      *      SAME AS EFFECTIVE DATE AND FIRST PATIENT HAS ADMIT DATE   *
		      *      ONE DAY PRIOR TO ENTERED DATE AND OTHER 2 HAS ADMIT DATE  *
		      *      SAME AS ENTERED DATE. IN THIS SCENARIO THE PROGRAM SKIPPED*
		      *      LAST 2 PATIENTS AND IT DID NOT APPEAR ON THE REPORT.      *
		      *            CHANGES ARE MARKED WITH NJV.                        *
		      *                                                                *
		      * PWR 18082 CGPA4917         PRAVEEN    01/28/2004               *
		      *                                                                *
		      *      ADDED A NEW CURSOR THAT SELECTS ACCOUNTS THAT HAVE        *
		      *      INSURANCE PLAN WITH MGD-CARE-DAYS > 0  FROM DMBIPM        *
		      *      AND LOADS IT INTO A TABLE. THE INSURANCE PLAN FOR EACH    *
		      *      ACCOUNT WILL BE COMPARED TO THE TABLE.THE REPORT PAGE     *
		      *      BREAKS BY INSURANCE PLAN.THE TITLE OF THE REPORT IS       *
		      *      CHANGED TO 'DAILY MULTI-VISIT REPORT'.A NEW FIELD HEADING *
		      *      IPLAN IS ADDED TO THE REPORT.                             *
		      *            CHANGES ARE MARKED WITH PNF.                        *
		      *                                                                *
		      * CO 20236  CGPA4995         PRAVEEN    03/18/2004               *
		      *                                                                *
		      *      ADDED A CHECK IN OVERLAPPING OUTPATIENT REGISTRATIONS     *
		      *      SECTION TO INCREMENT ACCTS-THIS-SSN ONLY WHEN PATIENT AGES*
		      *      ARE SAME,SO THAT PATIENT ACCOUNTS WITH SAME SSNO( ZEROES/ *
		      *      999999999) AND NAME BUT WITH AGE OTHER THAN THE AGE OF THE*
		      *      ACCOUNT PICKED UP IN CURSOR ACC-OUTP-CSR1A WILL BE        *
		      *      EXCLUDED FROM THE MVST01 REPORT.                          *
		      *            CHANGES ARE MARKED WITH PNF001.                     *
		      *                                                                *
		      *                                                                *
		      * PWR19020  CGPA7897         DEEPALI B. 11/13/2009               *
		      *                                                                *
		      *      ADDED BRBADR TABLE TO GET BIRTH DATE TO MATCH THE BIRTH   *
		      *      DATE INSTEAD OF AGE FOR PATIENT ACCOUNTS WITH SAME SSN    *
		      *      ( ZEROES/999999999).                                      *
		      *      ADDED A CHECK IN INSURANCE PLAN CURSORE TO SELECT THE POST*
		      *      PAYMENT WINDOW TO INCLUDE ON THE MVST01 REPORT.           *
		      *            CHANGES ARE MARKED WITH PA7897.                     *
		      *                                                                *
		      * INC11613967 - TO AVOID PUTTING ACCOUNTS ON SYSTEMATIC HOLD, IF *
		      *               THE MGD-CARE-DAYS-HOLD IS NOT EQUAL TO 'Y' ON    *
		      *               DMBIPM TABLE.                                    *
		      *               CHANGES ARE MARKED WITH CGPA8342.                *
		      * PRO 12172   - TO REFER BRBDXS TO QUERY PRINCIPAL DIAGNOSIS CODE*
		      *               UNDER 5010 CHANGES.                              *
		      *               CHANGES ARE MARKED WITH CGPA8479.                *
		      ******************************************************************
		      * PWR31919     CGPA8438                        08/27/2010        *
		      *      TO CHANGE THE PROGRAM TO EXCLUDE PRE SERVICE ACCONT FROM  *
		      *      MVST01 REPORT WHICH ARE EITHER HAVING NO CHARGE OR ALL    *
		      *      CHARGES HAVE BEEN PAID.                                   *
		      ******************************************************************
		      ******************************************************************
		      * INC11956126  CGPA8438                        08/27/2010        *
		      *      TO CHANGE THE PROGRAM TO ADD CHECK TO NOT PUT THE         *
		      *      FINAL BILLED ACCOUNTS ON HOLD.                            *
		      ******************************************************************
		      * INC000014342830 CGPA8881  FTI9079            06/01/2011
		      *      TO CHANGE THE PROGRAM TO RESOLVE THE ISSUE CAUSING PRE-SERV
		      *      ACCOUNTS WITH ZERO CHARGES TO APPEAR ON OVERLAPPING OUTPATI
		      *      ENT SECTION OF REPORT. AND FULLY RESTORED PATIENTS SHOULD
		      *      NOT APPEAR ON MVS REPORT.
		      *      CHANGES ARE MARKED WITH PA8881.
		      ****************************************************************
		      * PWR34634      CGPA9610                        07/10/2012       *
		      *      TO CHANGE THE CRITERIA FOR OVERLAPPING OUTPATIENT ACCOUNT *
		      *      REPORT TO ACCOUNTS MUST HAVE THE SAME ADMIT DATE 'OR'     *
		      *      THERE MUST BE CHARGES ON THE SAME DATE OF SERVICE         *
		      ******************************************************************
		      * INC2558702 TO RESOLVE ABEND IN BRDG*022 JOB.
		      ******************************************************************
		      *               CGPA010127     IKV8458          31/01/2013       *
		      *      TO MODIFY THE PROGRAM TO CHECK THE BIRTH-DATE ALONG WITH  *
		      *      THE LAST NAME AND SSN AT INITIAL LEVEL FOR CREATING       *
		      *      MVST01 REPORT.                                            *
		      ******************************************************************
		      * PRO12168        CGC11081  RNE8732            06/15/2012        *
		      *      TO CHANGE THE PROGRAM FOR ICD 10 IMPLEMENTATION           *
		      ******************************************************************
		      *  PWR36032      CGPA010671                   2013-09-19         *
		      *       TO ADD CHECK FOR ALL THE DEFAULT VALUES OF SSN.          *
		      *       CHANGES ARE MARKED WITH THE TAG C10671.                  *
		      ******************************************************************
		      *  CGPA011350  CRQ420912    05/22/2014                           *
		      *              RECOMPILED DUE TO COPYBOOK CHANGES IN OCDTCOMM.   *
		      ******************************************************************
		      * 06/08/15    POA7933            CGPA012453                      *
		      *             CHANGES TO ADD MAPPED CODE CONDITION ='N'          *
		      *             FOR BACKWARD MAPPER                                *
		      ******************************************************************
		      *  PWR37253      CGPA013835  JWU8184          2015/07/29         *
		      *       MODIFIED THE PROGRAM TO MOVE THE VALUE FBPW IN THE REASON*
		      *       CODE FOR THESYSTEMATIC HOLD OF FINAL BILL.               *
		      *       CHANGES ARE MARKED WITH THE TAG C13835.                  *
		      ******************************************************************
		      *  PWRE0340      CGPA015145  BRU7628          2017/03/08         *
		      *       MODIFIED THE PROGRAM TO INSERT IN NEW DATABASE           *
		      *       BRBMBH TABLE.                                            *
		      *       CHANGES ARE MARKED WITH THE TAG C15145.                  *
		      ******************************************************************
		      *  PWRE28822     CGPA015442  EXX7276          2017/08/22         *
		      *            RECOMPILED THE COMPONENT FOR COPYBOOK CHANGES       *
		      *            WSBRBNFC.                                           *
		      ******************************************************************
		      *  CRQ1254323    CGPA015685  JUD7235          2017/08/24         *
		      *            MODIFIED THE PROGRAM TO CHANGE THE HOLD-FBILL-DT TO *
		      *            ST-FBILL-DT.                                        *
		      *            CHANGES ARE MARKED WITH THE TAG C15685.             *
		      ******************************************************************
		      * 05/22/2019 DOF6346       PBI17482         CGPA017826           *
		      *            RECOMPILED THE PROGRAM DUE TO CHANGE IN COPYBOOK    *
		      *            WSBRBNFC FOR THE CHANGES IN SIZE OF AMOUNT FIELD TO *
		      *            TO BE DISPLAYED ON PA INDUSTRIAL SCREEN             *
		      ******************************************************************
		      * 01/22/2020 OHJ6940       PBI23350         CGPA018103           *
		      *            RECOMPILED THE COMPONENT WITH COBOL6 VERSION        *
		      ******************************************************************
		      * 03/12/2020 LYI6090       PBI26849         CGPA018226           *
		      *            MODIFIED THE PROGRAM TO ADD THE EXTRA VERIFICATION  *
		      *            OF CHARGE DATES FOR OVERLAPPING OUTPATIENT ACCOUNTS *
		      ******************************************************************
		      * 07/09/2020 OEI6626       F28835           CGPA018416           *
		      *            RECOMPILED THE PROGRAM DUE TO CHANGE IN COPYBOOK    *
		      *            WSBRBNFC FOR THE CHANGES IN UNINSURED PROCESSING.   *
		      ******************************************************************
		      * 10/26/2021 OHJ6940       F31175           CGPA019292           *
		      *            RECOMPILING THIS PROGRAM DUE TO VERSION CHANGE TO   *
		      *            COBOL6.                                             *
		      ******************************************************************
		         EJECT  */

		static string Mvs1dyrp = "The path to Mvs1dayRpt file";
		static string Applctrl = "The path to ApplicationControlParameters file";
		private FileDescription Mvs1dayRpt;
		private FileDescription ApplicationControlParameters;
		public CharField TraceSwitch = new CharField('N');
		public int InsCounter;
		public CharField SwIcdGoLiveProcess = new CharField();
		public int EomIndx;
		/*
		      *****************************************************************
		      *   E N D   O F   W O R K I N G   S T O R A G E
		      *****************************************************************
		       */
		private static Brdmvs _instance;
        private bool SaGood;
        private string CssStack;
        private string CssCoId;
        private long AccPatNo;
        private string AccPatName;
        private string AccAdmitDt;
        private decimal FinAncChg;
        private string AccSubUnit;
        private string AccDischDt;
        private decimal AccInsPlan1;
        private int AccFinClass;
        private string AccPatType;
        private string AccServCd;
        private string AccFbillDt;
        private string AccEnteredDt;
        private string DxsDiagCd;
        private string MedPrinDiagDesc;
        private string MedPrinDiagDescI10;
        private string AdrBirthDt;
        private object AccTotAcctBal;
        private string ApFileStatus = null;
        private char AccStack;
        private int AccCoId;
        private string Db2ErrorPara;
        private string GlbEffDateGlb;
        private char MedStack;
        private char DxsStack;
        private int MedCoId;
        private int DxsCoId;
        private string MedPatNo;
        private string DxsPatNo;
        private char DemStack;
        private int DemCoId;
        private long DemPatNo;
        private char NfcStack;
        private int NfcCoId;
        private long NfcPatNo;

        public static Brdmvs Instance
		{
			get
			{
				if (_instance == null)
				{
					_instance = new Brdmvs();
				}

				return _instance;
			}
		}
		public Brdmvs()
		{
			_instance = this;
			Mvs1dayRpt = new FileDescription("", FileDescriptionTypes.LineSequential);
			Mvs1dayRpt.DataRecord = ReportLine;
			ApplicationControlParameters = new FileDescription("", FileDescriptionTypes.LineSequential);
			ApplicationControlParameters.Length = 575;
		}
		public void Initialize()
		{
			Filler67.Redefine(AsZoneProcessParameters);
			Filler90.Redefine(AsZoneProcessParameters);
			Filler94.Redefine(AsZoneProcessParameters);
			Filler99.Redefine(AsZoneProcessParameters);
			Filler104.Redefine(AsZoneProcessParameters);
			Filler108.Redefine(AsZoneProcessParameters);
			AsCorpCloseTable.Redefine(AsZoneProcessParameters);
			BrdmvsCompatibility = new Compatibility();
			BrdmvsCompatibility.GetAllMethodsInfo(this);
			BrdmvsProcedureDivision();
		}
		private void BrdmvsProcedureDivision()
		{
			BrdmvsCompatibility.InitializeMethodsQueue();
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00100Mainline()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("00100-MAINLINE");
			}

			/*
			      *
			           */
			Console.WriteLine("BRDMVS ( MEDICARE MULTIPLE VISIT/SAME-DAY RPT)");
			CompilationDate.Value = DateTime.Now.ToString("yyMMddHHmmssffK");
			Console.WriteLine("***  BRDMVS COMPILED " + CompilationDate.Value + " BY J.EGAN   ***");
			Console.WriteLine(" ");
			BrdmvsCompatibility.PerformThru(this, "_00200ReadApplctrl", "_00200Exit");
			BrdmvsCompatibility.PerformThru(this, "_00300ReadBrbpgm", "_00300Exit");
			Mvs1dayRpt.OpenToWrite();
			BrdmvsCompatibility.PerformThru(this, "_7006GetGoLiveDate", "_7006Exit");
			MiscWsFields.Sub.Value = 1;

			do
			{
				_00400ProcessHospitals();
				MiscWsFields.Sub.Value = MiscWsFields.Sub.Value + 1;
			}
			while (!(MiscWsFields.Sub.Value > Filler90.AsZoneHospitalControl.AsZoneHospCount.Value));

			return;
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00200ReadApplctrl()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("00200-READ-APPLCTRL");
			}

			/*
			      *
			      ***************************************************************
			      *   OPEN APPLICATION CONTROL AND READ FIRST RECORD FOR DATE
			      *   AND ALSO THE PATIENT ACCOUNTING RECORD FOR HOSPITALS.
			      ***************************************************************
			           */
			string Db2ErrorPara = "00200-PROCESS-APPLCTRL";
			ProgramFlags.PfFaEof.Value = 'N';
			ApplicationControlParameters.OpenToRead();

			if (! SaGood)
			{
				Console.WriteLine("ERROR OPENING APPLICATION CONTROL FILE" + " IN 00200-PROCESS-APPLCTRL");
				ErrorUnitNumTable.ErrorUnitNumRdef.ErrorUnitWhole.Value = "NONE ";
				ErrorCode.ErrorMsgNum.Value = EditErrors.GenericNonDb2FileIOError.FirstOpenError.Value;
				ErrorFileName.Value = "APPLCTRL";
                if(!string.IsNullOrEmpty(ApFileStatus))
                ErrorVarText.Value = (ApFileStatus).Split(new string[] { "|" }, StringSplitOptions.None)[0];
				BrdmvsCompatibility.PerformThru(this, "_9500HuerwrErrorRtn", "_9500Exit");
			}

			while (!(string.Compare(Filler67.Filler68.Value, "DATE") == 0 || ProgramFlags.PfFaEof.Value == 'Y'))
			{
				ApplctrlParameterRecord.Value = ApplicationControlParameters.Read(ApplctrlParameterRecord.length);
				AsZoneProcessParameters.Value = ApplctrlParameterRecord.Value;

				if (ApplicationControlParameters.fdr.AtEnd)
				{
					ProgramFlags.PfFaEof.Value = 'Y';
				}

				if (! SaGood)
				{
					Console.WriteLine("FIRST READ TO APPLICATION-CONTROL FILE" + " WAS BAD IN 00200-PROCESS-APPLCTRL");
					ErrorUnitNumTable.ErrorUnitNumRdef.ErrorUnitWhole.Value = "NONE ";
					ErrorCode.ErrorMsgNum.Value = EditErrors.GenericNonDb2FileIOError.BadFirstRead.Value;
					ErrorFileName.Value = "APPLCTRL";
					ErrorVarText.Value = (ApFileStatus).Split(new string[] { "|" }, StringSplitOptions.None)[0];
					BrdmvsCompatibility.PerformThru(this, "_9500HuerwrErrorRtn", "_9500Exit");
				}
			}

			if (ProgramFlags.PfFaEof.Value == 'Y')
			{
				Console.WriteLine("THE FIRST RECORD OF THE APPLICATION CONTROL " + "IS NOT A DATE RECORD.  THE RECORD IS:  " + AsZoneProcessParameters.AsZoneApplicationId.Value);
				ErrorUnitNumTable.ErrorUnitNumRdef.ErrorUnitWhole.Value = "NONE ";
				ErrorVarText.Value = ("APPLICATION CONTROL DATE").Split(new string[] { "|" }, StringSplitOptions.None)[0];
				ErrorCode.ErrorMsgNum.Value = EditErrors.GenericNonDb2FileIOError.MissingRecord.Value;
				ErrorFileName.Value = "APPLCTRL";
				BrdmvsCompatibility.PerformThru(this, "_9500HuerwrErrorRtn", "_9500Exit");
			}

			MiscWsFields.WsDb2EffDatex.WsDb2EffCcyy.Value = Filler67.AsZoneDateControl.AsZoneEffDateAlpha.AsZoneEffYyyy.Value;
			MiscWsFields.WsDb2EffDatex.WsDb2EffMm.Value = Filler67.AsZoneDateControl.AsZoneEffDateAlpha.AsZoneEffMmdd.AsZoneEffMonth.ToString();
			MiscWsFields.WsDb2EffDatex.WsDb2EffDd.Value = Filler67.AsZoneDateControl.AsZoneEffDateAlpha.AsZoneEffMmdd.AsZoneEffDay.ToString();
			Console.WriteLine("EFFECTIVE DATE OF THIS RUN IS " + MiscWsFields.WsDb2EffDate.Value);
			HdrtrlParams.PlReportDate.PlRptYy.Value = Convert.ToInt32(Filler67.AsZoneDateControl.AsZoneEffDateAlpha.AsZoneEffYyyy.Value);
			HdrtrlParams.PlReportDate.PlRptMm.Value = Filler67.AsZoneDateControl.AsZoneEffDateAlpha.AsZoneEffMmdd.AsZoneEffMonth.Value;
			HdrtrlParams.PlReportDate.PlRptDd.Value = Filler67.AsZoneDateControl.AsZoneEffDateAlpha.AsZoneEffMmdd.AsZoneEffDay.Value;
			MiscWsFields.HoldStackId.Value = Filler67.AsZoneDateControl.AsZoneZone.Value;
            char DatabaseIdWork = Filler67.AsZoneDateControl.AsZoneDb2Packageset.Value;
            Console.WriteLine("DATABASE WORK ID: " + DatabaseIdWork + ".");

			while (!(string.Compare(Filler90.Filler91.Value, "PACT") == 0 || ProgramFlags.PfFaEof.Value == 'Y'))
			{
				ApplctrlParameterRecord.Value = ApplicationControlParameters.Read(ApplctrlParameterRecord.length);
				AsZoneProcessParameters.Value = ApplctrlParameterRecord.Value;

				if (ApplicationControlParameters.fdr.AtEnd)
				{
					ProgramFlags.PfFaEof.Value = 'Y';
				}

				if (! SaGood)
				{
					Console.WriteLine("SECOND READ TO APPLICATION-CONTROL FILE" + " WAS BAD IN 00200-PROCESS-APPLCTRL");
					ErrorUnitNumTable.ErrorUnitNumRdef.ErrorUnitWhole.Value = "NONE ";
					ErrorCode.ErrorMsgNum.Value = EditErrors.GenericNonDb2FileIOError.BadFirstRead.Value;
					ErrorFileName.Value = "APPLCTRL";
					ErrorVarText.Value = (ApFileStatus).Split(new string[] { "|" }, StringSplitOptions.None)[0];
					BrdmvsCompatibility.PerformThru(this, "_9500HuerwrErrorRtn", "_9500Exit");
				}
			}

			if (ProgramFlags.PfFaEof.Value == 'Y')
			{
				Console.WriteLine("THE PATIENT ACCOUNTING RECORD OF THE APPLICA" + "TION CONTROL WAS NOT FOUND!");
				ErrorUnitNumTable.ErrorUnitNumRdef.ErrorUnitWhole.Value = "NONE ";
				ErrorVarText.Value = ("PATIENT ACCT RECORD").Split(new string[] { "|" }, StringSplitOptions.None)[0];
				ErrorCode.ErrorMsgNum.Value = EditErrors.GenericNonDb2FileIOError.MissingRecord.Value;
				ErrorFileName.Value = "APPLCTRL";
				BrdmvsCompatibility.PerformThru(this, "_9500HuerwrErrorRtn", "_9500Exit");
			}

			ApplicationControlParameters.Close();
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00200Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00300ReadBrbpgm()
		{
            string Db2ErrorPara = "00300-READ-BRBPGM";
            DclbrbpgmType Dclbrbpgm = new DclbrbpgmType();
            if (DataAccess.Sqlcode == +100)
			{
				Console.WriteLine("NO ROW FOUND FOR PROGRAM BRDMVS IN BRBPGM");
				ErrorFileName.Value = "BRBPGM";
				ErrorCode.ErrorMsgNum.Value = 600;
				ErrorVarText.Value = ("BRDMVS|").PadRight(50, ' ').Substring(0, 50);
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
				PgmCommitFreq.MoveZero();
			}
			else
			{
				if (DataAccess.Sqlcode == 0)
				{
				}
				else
				{
					ErrorFileName.Value = "BRBPGM";
					BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
				}
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00300Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00400ProcessHospitals()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("00400-PROCESS-HOSPITALS");
			}

			/*
			      *
			      ****************************************************************
			      ** PROCESS EACH HOSPITAL FROM FIRST ACTIVITY.  A CURSOR WILL BE*
			      ** OPENED THAT WILL FETCH ALL OUTPATIENTS THAT HAVE AN ADMIT   *
			      ** DATE OR ENTERED EQUAL TO EFFECTIVE DATE                     *
			      ****************************************************************
			           */
			Console.WriteLine("***** PROCESSING HOSPITAL -- " + Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value + " *****");
			CountersAndTotals.PageCount.MoveZero();
			CommitCnt.MoveZero();
			MiscWsFields.HoldTotOutp1Found.MoveZero();
			ProgramFlags.PfRecordsWritten.Value = 'N';
			HdrtrlParams.Hdrtrl_5DigitUnit.Value = Convert.ToString(Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value);
            int AccCoId = Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value;
            MiscWsFields.HoldCoId.Value = Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value;
			HdrtrlParams.PlReqHeaderSw.Value = 'Y';
			HdrtrlParams.PlHudhtbType.Value = 'H';
			HdrtrlParams.HdrtrlSubunitProcessInd.Value = 'N';
			HdrtrlParams.Hdrtrl_5DigitSubunit.MoveZero();
			BrdmvsCompatibility.PerformThru(this, "_09200HeaderTrailer", "_09200Exit");
			/*
			      *    EXEC SQL
			      *       SELECT FC_MCARE,
			      *              FC_MCARE2,
			      *              FC_MCAID
			      *         INTO :HOLD-FCLASS1,
			      *              :HOLD-FCLASS2,
			      *              :HOLD-FCLASS3
			      *         FROM DMBPRM
			      *        WHERE HOSP_NO = :PRM-HOSP-NO
			      *    END-EXEC.
			      *    IF SQLCODE = 0
			      *       CONTINUE
			      *    ELSE
			      *       DISPLAY 'BAD SELECT ON DMBPRM FOR HOSP '
			      *              AS-ZONE-HOSP-NUMB (SUB)
			      *       PERFORM 09400-DB2-ERROR
			      *    END-IF.
			      *
			      *    IF TRACING
			      *       DISPLAY 'HOLD-FCLASS1 = ' HOLD-FCLASS1
			      *       DISPLAY 'HOLD-FCLASS2 = ' HOLD-FCLASS2
			      *       DISPLAY 'HOLD-FCLASS3 = ' HOLD-FCLASS3
			      *    END-IF.
			      *
			           */
			AccStack = MiscWsFields.HoldStackId.Value;
			ProgramFlags.PfOutpCsr1Eof.Value = 'N';

			/*
			      *
			           */
			if (DataAccess.Sqlcode == 0)
			{
			}
			else
			{
				Console.WriteLine("BAD OPEN OF MGD-CARE-DAYS-CSR FOR HOSP " + Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value);
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
			}

			CountersAndTotals.InsPlanCtr.MoveZero();
			InsCounter = 1;
			ProgramFlags.PfResTable.Value = 'N';

			do
			{
				_00410FetchMgdCareDays();
			}
			while (!(ProgramFlags.PfResTable.Value == 'Y'));

			if (DataAccess.Sqlcode == 0)
			{
			}
			else
			{
				Console.WriteLine("BAD CLOSE OF MGD-CARE-DAYS-CSR FOR HOSP " + Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value);
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
			}

			Csr1SsnoTable.Initialize();
			Ss99PanoTable.Initialize();
			ProgramFlags.PfOverlapSection.Value = 'N';

			if (DataAccess.Sqlcode == 0)
			{
			}
			else
			{
				Console.WriteLine("BAD OPEN OF OUTPATIENT CURSOR1 FOR HOSP " + Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value);
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
			}

			BrdmvsCompatibility.PerformThru(this, "_05000FetchOutpatientCsr1", "_05000Exit");

			do
			{
				_00500ProcessOutpatients1();
			}
			while (!(ProgramFlags.PfOutpCsr1Eof.Value == 'Y'));

			if (DataAccess.Sqlcode == 0)
			{
			}
			else
			{
				Console.WriteLine("BAD CLOSE OF OUTPATIENT CURSOR1 FOR HOSP " + Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value);
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
			}

			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("HOLD-PAT-NO = " + HoldAccOutp1Fields.HoldPatNo.StringValue);
			}

			/*
			      *
			           */
			if (MiscWsFields.HoldTotOutp1Found.Value == 0)
			{
				BrdmvsCompatibility.PerformThru(this, "_08300WriteHeadingLines", "_08300Exit");
				BrdmvsCompatibility.PerformThru(this, "_08400WriteNoDataLine", "_08400Exit");
			}
			else
			{
				BrdmvsCompatibility.PerformThru(this, "_08500WriteTotalLines", "_08500Exit");
			}

			/*
			      *    MOVE 'T'                     TO PL-HUDHTB-TYPE.
			      *    PERFORM 09200-HEADER-TRAILER THRU 09200-EXIT.
			      *    DISPLAY 'TOTAL PATIENTS     : ' HOLD-TOT-OUTP1-FOUND.
			           */
			Console.WriteLine("TOTAL PATIENTS - BY ADMIT DATE : " + MiscWsFields.HoldTotOutp1Found.StringValue);
			MiscWsFields.HoldTotOutp1Found.MoveZero();
			MiscWsFields.HoldCurrentInsplan.MoveZero();
			CountersAndTotals.LineCtr.Value = 60;
			/*
			      *
			           */
			AccStack = MiscWsFields.HoldStackId.Value;
			ProgramFlags.PfOutpCsr1Eof.Value = 'N';
			Csr1SsnoTable.Initialize();
			Ss99PanoTable.Initialize();
			ProgramFlags.PfOverlapSection.Value = 'Y';

			if (DataAccess.Sqlcode == 0)
			{
			}
			else
			{
				Console.WriteLine("BAD OPEN OF OUTPATIENT CURSOR1A FOR HOSP " + Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value);
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
			}

			BrdmvsCompatibility.PerformThru(this, "_06000FetchOutpatientCsr1a", "_06000Exit");

			do
			{
				_00600ProcessOutpatients1a();
			}
			while (!(ProgramFlags.PfOutpCsr1Eof.Value == 'Y'));

			if (DataAccess.Sqlcode == 0)
			{
			}
			else
			{
				Console.WriteLine("BAD CLOSE OF OUTPATIENT CURSOR1A FOR HOSP " + Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value);
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
			}

			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("HOLD-PAT-NO = " + HoldAccOutp1Fields.HoldPatNo.StringValue);
			}

			/*
			      *
			           */
			if (MiscWsFields.HoldTotOutp1Found.Value == 0)
			{
				BrdmvsCompatibility.PerformThru(this, "_08300WriteHeadingLines", "_08300Exit");
				BrdmvsCompatibility.PerformThru(this, "_08400WriteNoDataLine", "_08400Exit");
			}
			else
			{
				BrdmvsCompatibility.PerformThru(this, "_08500WriteTotalLines", "_08500Exit");
			}

			HdrtrlParams.PlHudhtbType.Value = 'T';
			BrdmvsCompatibility.PerformThru(this, "_09200HeaderTrailer", "_09200Exit");
			Console.WriteLine("TOTAL PATIENTS - OVERLAPPING   : " + MiscWsFields.HoldTotOutp1Found.StringValue);
			MiscWsFields.HoldTotOutp1Found.MoveZero();
			MiscWsFields.HoldCurrentInsplan.MoveZero();
			CountersAndTotals.LineCtr.Value = 60;
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00400Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _7006GetGoLiveDate()
		{
			Db2ErrorPara = "7006-GET-GO-LIVE-DATE";
			/*
			      *
			       */
			SwIcdGoLiveProcess.Initialize();

			/*
			      *
			       */
			if (DataAccess.Sqlcode == +0)
			{
				if (Convert.ToDateTime(MiscWsFields.WsDb2EffDate.Value) >= Convert.ToDateTime(GlbEffDateGlb))
				{
					SwIcdGoLiveProcess.Value = 'Y';
				}
			}
			else
			{
				Console.WriteLine("ERROR IN SELECT FROM DMBGLB TABLE FOR" + " EFF DT   = " + MiscWsFields.WsDb2EffDate.Value);
				ErrorFileName.Value = "DMBGLB";
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _7006Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00410FetchMgdCareDays()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("00410-FETCH-MGD-CARE-DAYS");
			}

			/*
			      *
			      ****************************************************************
			      ** FETCHES ALL INSURANCE PLANS HAVING MGD_CARE_DAYS > 0 FOR THE*
			      ** UNIT BEING PROCESSED FROM DMBIPM TABLE.                     *
			      ****************************************************************
			           */
			if (DataAccess.Read())
			{
				HoldAccOutp1Fields.HoldInsurancePlan.Value = DataAccess.ReadIntoDecimal(0);
				HoldAccOutp1Fields.HoldPayorName.Value = DataAccess.ReadIntoString(1);
			}

			/*
			      *
			           */

			/*
			      *
			       */
			switch (DataAccess.Sqlcode)
			{
			case 0:
				CountersAndTotals.InsPlanCtr.Value = CountersAndTotals.InsPlanCtr.Value + 1;
				MgdCareDaysTable.MgdCareDaysTab[InsCounter - 1].InsurancePlan.Value = HoldAccOutp1Fields.HoldInsurancePlan.Value;
				MgdCareDaysTable.MgdCareDaysTab[InsCounter - 1].PayorName.Value = HoldAccOutp1Fields.HoldPayorName.Value;
				InsCounter += 1;
				break;

			case+100:
				ProgramFlags.PfResTable.Value = 'Y';
				break;

			default:
				Console.WriteLine("BAD FETCH OF MGD-CARE-DAYS-CURSOR");
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
				break;
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00410Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00500ProcessOutpatients1()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("00500-PROCESS-OUTPATIENTS1");
			}

			/*
			      *
			      ****************************************************************
			      ** FOR EACH OUTPATIENT FOUND, OPEN A CURSOR FOR ALL OUTPATIENTS*
			      ** WHICH MEET THE FOLLOWING CRITERIA:                          *
			      ** 1.  THE SSN  MUST MATCH THE SSN OF THE PATIENT SELECTED IN  *
			      **     THE 1ST CURSOR.                                         *
			      ** 2.  THE 1ST 4 CHARS OF THE PATIENT NAME MUST BE THE SAME AS *
			      **     THE NAME OF THE PATIENT SELECTED IN THE 1ST CURSOR.     *
			      ****************************************************************
			           */
			DclbrbaccType Dclbrbacc = new DclbrbaccType();
			DclbrbfinType Dclbrbfin = new DclbrbfinType();
			/*
			      *               DCLBRBDEM.
			           */
			AccStack = MiscWsFields.HoldStackId.Value;
            int AccCoId = Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value;
            ProgramFlags.PfOutpCsr2Eof.Value = 'N';
			MiscWsFields.AcctsWithChgs.MoveZero();
			MiscWsFields.AcctsWithoutChgs.MoveZero();
			MiscWsFields.AcctsThisSsn.Value = 1;
			Csr2Ss.Value = +1;

			if (HoldAccOutp1Fields.HoldAncChg.Value > 0)
			{
				MiscWsFields.AcctsWithChgs.Value = MiscWsFields.AcctsWithChgs.Value + 1;
			}
			else
			{
				MiscWsFields.AcctsWithoutChgs.Value = MiscWsFields.AcctsWithoutChgs.Value + 1;
			}

			if (DataAccess.Sqlcode == 0)
			{
			}
			else
			{
				Console.WriteLine("BAD OPEN ON OUTPATIENT CURSOR2");
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
			}

			BrdmvsCompatibility.PerformThru(this, "_05100FetchOutpatientCsr2", "_05100Exit");

			while (!(ProgramFlags.PfOutpCsr2Eof.Value == 'Y'))
			{
				BrdmvsCompatibility.PerformThru(this, "_00520CheckOutpatient", "_00520Exit");
				BrdmvsCompatibility.PerformThru(this, "_05100FetchOutpatientCsr2", "_05100Exit");
			}

			if (MiscWsFields.AcctsThisSsn.Value > 0)
			{
				if (MiscWsFields.AcctsWithChgs.Value > 1)
				{
					BrdmvsCompatibility.PerformThru(this, "_08000WriteOutpatientData", "_08000Exit");
				}
			}

			if (MiscWsFields.AcctsWithChgs.Value > 0
			        && MiscWsFields.AcctsWithoutChgs.Value > 0)
			{
				Console.WriteLine("FOLLOWING ACCTS POSSIBLY COMBINED:");
				Console.WriteLine("-------OUTPATIENT NO " + HoldAccOutp1Fields.HoldPatNo.StringValue);
				Ss1.Value = +1;

				while (!(StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StPatNo.Value == 0))
				{
					Console.WriteLine("-------OUTPATIENT NO " + StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StPatNo.Value);
					Ss1.Value = Ss1.Value+1;
				}

				Console.WriteLine("-------------------------------------");
			}

			if (DataAccess.Sqlcode == 0)
			{
			}
			else
			{
				Console.WriteLine("BAD CLOSE ON OUTPATIENT CURSOR2");
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
			}

			BrdmvsCompatibility.PerformThru(this, "_05000FetchOutpatientCsr1", "_05000Exit");
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00500Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00520CheckOutpatient()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("00520-CHECK-OUTPATIENT");
			}

			/*
			      *
			      *    IF HOLD-PAT-SSNO = 000000000 OR 999999999
			      *       MOVE ACC-PAT-NO     TO HOLD-ADR-PAT-NO
			      *       PERFORM 05010-SELECT-BRBADR THRU 05010-EXIT
			      *       IF HOLD-PAT-AGE = DEM-PAT-AGE
			      *       IF HOLD-BIRTH-DT = ADR-BIRTH-DT
			      *          DISPLAY '--- PAT AGE USED FOR COMPARE ---'
			      *          DISPLAY '--- PAT BIRTH DATE USED FOR COMPARE ---'
			      *       ELSE
			      *          GO TO 00520-EXIT
			      *       END-IF
			      *    END-IF.
			           */
			if (DataAccess.Sqlcode != 0)
			{
				Console.WriteLine("ERROR ENCOUNTERED DURING BRBCSS COUNT SELECT");
				Console.WriteLine(" " + CssStack + " " + CssCoId + " " + AccPatNo + " " + HoldAccOutp1Fields.HoldPatNo.StringValue);
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
			}
			else
			{
				/*
				      *        IF BRBCSS-COUNT > 0
				               */
				if (CountersAndTotals.BrbcssCount.Value > 0 || HoldAccOutp1Fields.HoldAdmitDt.Value == AccAdmitDt)
				{
					BrdmvsCompatibility.PerformThru(this, "_00550StoreCsr2Lines", "_00550Exit");
				}
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00520Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00550StoreCsr2Lines()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("00550-STORE-CSR2-LINES");
				Console.WriteLine("CSR2-SS    = " + Csr2Ss.StringValue);
				Console.WriteLine("ACC-PAT-NO = " + AccPatNo);
				Console.WriteLine("FIN-ANC-HG = " + FinAncChg);
			}

			/*
			      *
			           */
			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StSubUnit.Value = AccSubUnit;
			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StPatNo.Value = Convert.ToInt64(AccPatNo);
			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StAdmitDt.Value = AccAdmitDt;
			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StDischDt.Value = AccDischDt;
			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StIplan.Value = AccInsPlan1;
			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StFc.Value = AccFinClass;
			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StType.Value = AccPatType;
			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StSvcCode.Value = AccServCd;
			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StChgs.Value = Convert.ToDecimal(FinAncChg);

			if (FinAncChg > 0)
			{
				MiscWsFields.AcctsWithChgs.Value = MiscWsFields.AcctsWithChgs.Value + 1;
			}
			else
			{
				MiscWsFields.AcctsWithoutChgs.Value = MiscWsFields.AcctsWithoutChgs.Value + 1;
			}

			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StFbillDt.Value = AccFbillDt;
			MedStack = MiscWsFields.HoldStackId.Value;
			DxsStack = MiscWsFields.HoldStackId.Value;
			MedCoId = Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value;
			DxsCoId = Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value;
			MedPatNo = Convert.ToString(AccPatNo);
			DxsPatNo = Convert.ToString(AccPatNo);

			if (Convert.ToDateTime(AccEnteredDt) < Convert.ToDateTime(HoldAccOutp1Fields.HoldEnteredDt.Value))
			{
				HoldAccOutp1Fields.HoldEnteredDt.Value = AccEnteredDt;
			}

			BrdmvsCompatibility.PerformThru(this, "_08200ReadBrbmed", "_08200Exit");
			WsIcdVersInd.Value = '9';
			BrdmvsCompatibility.PerformThru(this, "_08200ReadBrbdxs", "_08200BrbdxsExit");
			/*
			      *    MOVE MED-DIAG-CD1            TO ST-DIAG      (CSR2-SS).
			           */
			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StDiag.Value = DxsDiagCd;
			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StDiagDisc.Value = MedPrinDiagDesc;
			WsIcdVersInd.Value = '0';
			BrdmvsCompatibility.PerformThru(this, "_08200ReadBrbdxs", "_08200BrbdxsExit");
			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StDiag_0.Value = DxsDiagCd;
			StoredCsr2Lines.StoredCsr2Line[Csr2Ss.Value - 1].StDiagDisc_0.Value = MedPrinDiagDescI10;
			Csr2Ss.Value = Csr2Ss.Value + 1;

			/*
			      *    IF CSR2-SS > 1000
			      *    IF CSR2-SS > 9000
			           */
			if (Csr2Ss.Value > 1000)
			{
				Console.WriteLine("STORED-CSR2-LINES ERROR");
				Console.WriteLine("ACC-PAT-NO = " + AccPatNo);
				Console.WriteLine("ERROR PAR = 00550-STORE-CSR2-LINES");
				BrdmvsCompatibility.PerformThru(this, "_9500HuerwrErrorRtn");
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00550Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00600ProcessOutpatients1a()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("00600-PROCESS-OUTPATIENTS1A");
			}

			/*
			      *
			      ****************************************************************
			      ** FOR EACH OUTPATIENT FOUND, OPEN A CURSOR FOR ALL OUTPATIENTS*
			      ** WHICH MEET THE FOLLOWING CRITERIA:                          *
			      ** 1.  THE SSN  MUST MATCH THE SSN OF THE PATIENT SELECTED IN  *
			      **     THE 1ST CURSOR.                                         *
			      ** 2.  THE 1ST 4 CHARS OF THE PATIENT NAME MUST BE THE SAME AS *
			      **     THE NAME OF THE PATIENT SELECTED IN THE 1ST CURSOR.     *
			      ****************************************************************
			           */
			DclbrbaccType Dclbrbacc = new DclbrbaccType();
			DclbrbfinType Dclbrbfin = new DclbrbfinType();
			/*
			      *               DCLBRBDEM.
			           */
			AccStack = MiscWsFields.HoldStackId.Value;
			AccCoId = Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value;
			ProgramFlags.PfOutpCsr2Eof.Value = 'N';
			MiscWsFields.AcctsWithChgs.MoveZero();
			MiscWsFields.AcctsWithoutChgs.MoveZero();
			MiscWsFields.AcctsThisSsn.Value = 1;
			Csr2Ss.Value = +1;

			if (HoldAccOutp1Fields.HoldAncChg.Value > 0)
			{
				MiscWsFields.AcctsWithChgs.Value = MiscWsFields.AcctsWithChgs.Value + 1;
			}
			else
			{
				MiscWsFields.AcctsWithoutChgs.Value = MiscWsFields.AcctsWithoutChgs.Value + 1;
			}

			if (DataAccess.Sqlcode == 0)
			{
			}
			else
			{
				Console.WriteLine("BAD OPEN ON OUTPATIENT CURSOR2A");
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
			}

			BrdmvsCompatibility.PerformThru(this, "_06100FetchOutpatientCsr2a", "_06100Exit");

			while (!(ProgramFlags.PfOutpCsr2Eof.Value == 'Y'))
			{
				BrdmvsCompatibility.PerformThru(this, "_00620CheckOutpatient", "_00620Exit");
				BrdmvsCompatibility.PerformThru(this, "_06100FetchOutpatientCsr2a", "_06100Exit");
			}

			if (MiscWsFields.AcctsThisSsn.Value > 1
			        && MiscWsFields.AcctsWithChgs.Value > 1)
			{
				BrdmvsCompatibility.PerformThru(this, "_08000WriteOutpatientData", "_08000Exit");
			}

			if (DataAccess.Sqlcode == 0)
			{
			}
			else
			{
				Console.WriteLine("BAD CLOSE ON OUTPATIENT CURSOR2A");
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
			}

			BrdmvsCompatibility.PerformThru(this, "_06000FetchOutpatientCsr1a", "_06000Exit");
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00600Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00620CheckOutpatient()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("00620-CHECK-OUTPATIENT");
			}

			/*
			      *
			      *    IF HOLD-PAT-SSNO = 000000000 OR 999999999
			      *       IF HOLD-PAT-AGE = DEM-PAT-AGE
			      *       IF HOLD-BIRTH-DT = ADR-BIRTH-DT
			      *          DISPLAY '--- PAT AGE USED FOR COMPARE ---'
			      *          DISPLAY '--- PAT BIRTH DATE USED FOR COMPARE ---'
			      *       ELSE
			      *          GO TO 00620-EXIT
			      *       END-IF
			      *    END-IF.
			           */
			if (DataAccess.Sqlcode != 0)
			{
				Console.WriteLine("ERROR ENCOUNTERED DURING BRBCSS COUNT SELECT");
				Console.WriteLine(" " + CssStack + " " + CssCoId + " " + AccPatNo + " " + HoldAccOutp1Fields.HoldPatNo.StringValue);
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
			}
			else
			{
				if (CountersAndTotals.BrbcssCount.Value > 0)
				{
					BrdmvsCompatibility.PerformThru(this, "_00550StoreCsr2Lines", "_00550Exit");
				}
			}

			/*
			      *    PERFORM 00550-STORE-CSR2-LINES THRU 00550-EXIT.
			       */
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _00620Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _05000FetchOutpatientCsr1()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("05000-FETCH-OUTPATIENT-CSR1");
			}

			/*
			      *
			      ****************************************************************
			      ** THIS PARA WILL FETCH ALL OUTPATIENTS WITH  ADMIT DATE OR    *
			      ** ENTERED DATE EQUAL TO EFFECTIVE DATE  AND SEARCHES THE      *
			      ** MGD-CARE-DAYS-TABLE FOR ELIGIBILITY OF IPLAN                *
			      ****************************************************************
			           */
			if (DataAccess.Read())
			{
				HoldAccOutp1Fields.HoldPatNo.Value = DataAccess.ReadIntoLong(0);
				HoldAccOutp1Fields.HoldPatName.Value = DataAccess.ReadIntoString(1);
				HoldAccOutp1Fields.HoldPatType.Value = DataAccess.ReadIntoString(2);
				HoldAccOutp1Fields.HoldEnteredDt.Value = DataAccess.ReadIntoString(3);
				HoldAccOutp1Fields.HoldAdmitDt.Value = DataAccess.ReadIntoString(4);
				HoldAccOutp1Fields.HoldDischDt.Value = DataAccess.ReadIntoString(5);
				HoldAccOutp1Fields.HoldFbillDt.Value = DataAccess.ReadIntoString(6);
				HoldAccOutp1Fields.HoldInsPlan.Value = DataAccess.ReadIntoDecimal(7);
				HoldAccOutp1Fields.HoldFinClass.Value = DataAccess.ReadIntoInt(8);
				HoldAccOutp1Fields.HoldSvcCode.Value = DataAccess.ReadIntoString(9);
				HoldAccOutp1Fields.HoldPatSsno.Value = DataAccess.ReadIntoLong(10);
				HoldAccOutp1Fields.HoldSubUnit.Value = DataAccess.ReadIntoString(11);
				HoldAccOutp1Fields.HoldAncChg.Value = DataAccess.ReadIntoDecimal(12);
				HoldAccOutp1Fields.HoldDailyCareChg.Value = DataAccess.ReadIntoDecimal(13);
			}

			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("SQLCODE     = " + DataAccess.Sqlcode);
			}

			/*
			      *
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				if (DataAccess.Sqlcode == 0)
				{
					Console.WriteLine("HOLD-PAT-NO = " + HoldAccOutp1Fields.HoldPatNo.StringValue);
				}
			}

			/*
			      *
			           */
			switch (DataAccess.Sqlcode)
			{
			case 0:
				if ((string.Compare(HoldAccOutp1Fields.HoldPatType.Value, "OP") == 0 || string.Compare(HoldAccOutp1Fields.HoldPatType.Value, "OPV") == 0 || string.Compare(HoldAccOutp1Fields.HoldPatType.Value, "EP") == 0
				        || string.Compare(HoldAccOutp1Fields.HoldPatType.Value, "EPV") == 0 || string.Compare(HoldAccOutp1Fields.HoldPatType.Value, "SP") == 0 || string.Compare(HoldAccOutp1Fields.HoldPatType.Value, "SPV") == 0)
				        && HoldAccOutp1Fields.HoldAncChg.Value == 0)
				{
					BrdmvsCompatibility.GoTo(_05000FetchOutpatientCsr1);
					return;
				}

				ProgramFlags.PfPrintInp.Value = 'N';
				break;

			case+100:
				ProgramFlags.PfOutpCsr1Eof.Value = 'Y';
				BrdmvsCompatibility.GoTo(_05000Exit);
				return;
				break;

			default:
				Console.WriteLine("BAD RETURN ON FETCH OF INPATIENT CURSOR" + " FOR HOSP " + Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value);
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
				break;
			}

			MiscWsFields.HoldCompareIplan.Value = Convert.ToInt32(HoldAccOutp1Fields.HoldInsPlan.Value);
			BrdmvsCompatibility.PerformThru(this, "_06200SearchMgdTable", "_06200Exit");

			if (ProgramFlags.PfPlanFound.Value == 'Y')
			{
				Mvs1dayRptHead3a.Med72hrPayorName.Value = MgdCareDaysTable.MgdCareDaysTab[InsCounter - 1].PayorName.Value;
			}
			else
			{
				Console.WriteLine("PLAN NOT FOUND IN MGD-TABLE");
				BrdmvsCompatibility.GoTo(_05000FetchOutpatientCsr1);
				return;
			}

			Ss1.Value = +1;

			while (!(Ss1.Value > 1001))
			{
				StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].Value = StoredCsr2Lines.Csr2LineInit.Value;
				Ss1.Value = Ss1.Value+1;
			}

			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("HOLD-PAT-SSNO = " + HoldAccOutp1Fields.HoldPatNo.StringValue);
			}

			/*
			      *
			      ***  IF HOLD-PAT-SSNO = 000000000 OR 999999999
			      ***      GO TO 05000-EXIT
			      ***  END-IF.
			      *
			           */
			Ss1.Value = +1;

			while (!((HoldAccOutp1Fields.HoldPatSsno.Value == Csr1SsnoTable.SsnoEntryTbl[Ss1.Value - 1].SsnoEntry.Value  ||
			          Csr1SsnoTable.SsnoEntryTbl[Ss1.Value - 1].SsnoEntry.Value == 0              ||
			          Ss1.Value == SsnoSs1Limit.Value)))
			{
				Ss1.Value = Ss1.Value+1;
			}

			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("HOLD-PAT-NO     = " + HoldAccOutp1Fields.HoldPatNo.StringValue);
				Console.WriteLine("SS1             = " + Ss1.StringValue);
				Console.WriteLine("SSNO-ENTRY      = " + Csr1SsnoTable.SsnoEntryTbl[Ss1.Value - 1].SsnoEntry.Value);
				Console.WriteLine("HOLD-ENTERED-DT = " + HoldAccOutp1Fields.HoldEnteredDt.Value);
				Console.WriteLine("LAST-ENTERED-DT = " + MiscWsFields.LastEnteredDt.Value);
				Console.WriteLine("HOLD-PAT-SSNO   = " + HoldAccOutp1Fields.HoldPatSsno.StringValue);
			}

			/*
			      *
			           */
			if (HoldAccOutp1Fields.HoldPatSsno.Value == Csr1SsnoTable.SsnoEntryTbl[Ss1.Value - 1].SsnoEntry.Value)
			{
				if (HoldAccOutp1Fields.HoldPatSsno.Value != 0)
				{
					BrdmvsCompatibility.GoTo(_05000FetchOutpatientCsr1);
					return;
				}
			}

			HoldAdrPatNo.Value = HoldAccOutp1Fields.HoldPatNo.Value;
			BrdmvsCompatibility.PerformThru(this, "_05010SelectBrbadr", "_05010Exit");
			HoldAccOutp1Fields.HoldBirthDt.Value = AdrBirthDt;

			/*
			      *    IF HOLD-PAT-SSNO = 000000000 OR 999999999
			           */
			if (HoldAccOutp1Fields.HoldPatSsno.Value == 000000000 || HoldAccOutp1Fields.HoldPatSsno.Value == 111111111 || HoldAccOutp1Fields.HoldPatSsno.Value == 222222222
			        || HoldAccOutp1Fields.HoldPatSsno.Value == 333333333 || HoldAccOutp1Fields.HoldPatSsno.Value == 444444444 || HoldAccOutp1Fields.HoldPatSsno.Value == 555555555
			        || HoldAccOutp1Fields.HoldPatSsno.Value == 666666666 || HoldAccOutp1Fields.HoldPatSsno.Value == 777777777 || HoldAccOutp1Fields.HoldPatSsno.Value == 888888888
			        || HoldAccOutp1Fields.HoldPatSsno.Value == 999999999 || HoldAccOutp1Fields.HoldPatSsno.Value == 123456789)
			{
				Pa1.Value = +1;

				while (!(HoldAccOutp1Fields.HoldPatNo.Value == Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value ||
				         Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value == 0       ||
				         /*
				               *                  PA1 = 1000
				               *                  PA1 = 9000
				                                  */
				         Pa1.Value == 1000))
				{
					Pa1.Value = Pa1.Value+1;
				}

				if (HoldAccOutp1Fields.HoldPatNo.Value == Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value)
				{
					BrdmvsCompatibility.GoTo(_05000FetchOutpatientCsr1);
					return;
				}

				/*
				      *         IF PA1 = 1000
				      *         IF PA1 = 9000
				                */
				if (Pa1.Value == 1000)
				{
					Console.WriteLine("PA#S TABLE FOR SSNO=9S OVERFLOW ERROR");
					BrdmvsCompatibility.PerformThru(this, "_9500HuerwrErrorRtn");
				}

				Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value = HoldAccOutp1Fields.HoldPatNo.Value;
				HoldAdrPatNo.Value = HoldAccOutp1Fields.HoldPatNo.Value;
				BrdmvsCompatibility.PerformThru(this, "_05010SelectBrbadr", "_05010Exit");
				HoldAccOutp1Fields.HoldBirthDt.Value = AdrBirthDt;
			}
			else
			{
				if (Ss1.Value == SsnoSs1Limit.Value)
				{
					Console.WriteLine("CURSOR1 SSNO TABLE OVERFLOW ERROR");
					BrdmvsCompatibility.PerformThru(this, "_9500HuerwrErrorRtn");
				}
				else
				{
					/*
					      *            IF HOLD-ENTERED-DT NOT = LAST-ENTERED-DT
					      *                INITIALIZE CSR1-SSNO-TABLE
					      *                MOVE HOLD-ENTERED-DT TO LAST-ENTERED-DT
					      *                MOVE +1 TO SS1
					      *            END-IF
					                   */
					Csr1SsnoTable.SsnoEntryTbl[Ss1.Value - 1].SsnoEntry.Value = HoldAccOutp1Fields.HoldPatSsno.Value;
					Csr1SsnoTable.SsnoEntryTbl[Ss1.Value - 1].SsnoAdmitDt.Value = HoldAccOutp1Fields.HoldAdmitDt.Value;
				}
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _05000Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _05010SelectBrbadr()
		{
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("05010-SELECT-BRBADR");
			}

			DclbrbadrType Dclbrbadr = new DclbrbadrType();

			if (DataAccess.Sqlcode == 0)
			{
			}
			else
			{
				Console.WriteLine("BAD SELECT ON BRBADR TABLE");
				Console.WriteLine("SQLCODE = " + DataAccess.Sqlcode);
				Console.WriteLine("CO_ID =  " + AccCoId);
				Console.WriteLine("PAT_NO =  " + HoldAdrPatNo.StringValue);
				ErrorFileName.Value = "BRBADR";
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _05010Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _05100FetchOutpatientCsr2()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("05100-FETCH-OUTPATIENT-CSR2");
			}

			/*
			      *
			      *****************************************************************
			      ** THIS PARA WILL FETCH ALL OUTPATIENTS THAT MATCH THE          *
			      ** OUTPATIENTS FETCHED IN CURSOR ACC-OUTP-CSR1 WITH THE FIRST   *
			      ** 4 LETTERS OF NAME AND EITHER THE SOCIAL SECURITY NUMBER OR   *
			      ** AGE.                                                         *
			      *****************************************************************
			           */
			if (DataAccess.Read())
			{
				AccPatNo = Convert.ToInt16(DataAccess.ReadIntoString(0));
				AccPatName = DataAccess.ReadIntoString(1);
				AccPatType = DataAccess.ReadIntoString(2);
				AccEnteredDt = DataAccess.ReadIntoString(3);
				AccAdmitDt = DataAccess.ReadIntoString(4);
				AccTotAcctBal = DataAccess.ReadIntoString(5);
				AccDischDt = DataAccess.ReadIntoString(6);
				AccFbillDt = DataAccess.ReadIntoString(7);
				AccInsPlan1 = Convert.ToInt16(DataAccess.ReadIntoString(8));
				AccFinClass = Convert.ToInt16(DataAccess.ReadIntoString(9));
				AccServCd = DataAccess.ReadIntoString(10);
				AccPatSsno.value = Convert.ToInt16(DataAccess.ReadIntoString(11));
				AccSubUnit = DataAccess.ReadIntoString(12);
				FinAncChg = Convert.ToDecimal(DataAccess.ReadIntoString(13));
				FinDailyCareChg.value = DataAccess.ReadIntoString(14);
			}

			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("SQLCODE = " + DataAccess.Sqlcode);
			}

			/*
			      *
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				if (DataAccess.Sqlcode == 0)
				{
					Console.WriteLine("ACC-PAT-NO         " + AccPatNo);
					Console.WriteLine("ACC-TOT-ACCT-BAL = " + AccTotAcctBal);
					Console.WriteLine("FIN-ANC-CHG      = " + FinAncChg);
				}
			}

			/*
			      *
			           */
			if (DataAccess.Sqlcode == 0)
			{
				if ((AccPatType == "OP" || AccPatType == "OPV" || AccPatType == "EP"
				        || AccPatType == "EPV" || AccPatType == "SP" || AccPatType == "SPV")
				        && FinAncChg == 0)
				{
					BrdmvsCompatibility.GoTo(_05100FetchOutpatientCsr2);
					return;
				}

				/*
				      *        IF ACC-PAT-SSNO = 000000000 OR 999999999
				               */
				if (AccPatSsno.value == 000000000 || AccPatSsno.value == 111111111 || AccPatSsno.value == 222222222
				        || AccPatSsno.value == 333333333 || AccPatSsno.value == 444444444 || AccPatSsno.value == 555555555
				        || AccPatSsno.value == 666666666 || AccPatSsno.value == 777777777 || AccPatSsno.value == 888888888
				        || AccPatSsno.value == 999999999 || AccPatSsno.value == 123456789)
				{
					Pa1.Value = +1;

					while (!(Convert.ToInt64(AccPatNo) == Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value ||
					         Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value == 0      ||
					         /*
					               *                      PA1 = 1000
					               *                      PA1 = 9000
					                                      */
					         Pa1.Value == 1000))
					{
						Pa1.Value = Pa1.Value+1;
					}

					if (Convert.ToInt64(AccPatNo) == Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value)
					{
						BrdmvsCompatibility.GoTo(_05100FetchOutpatientCsr2);
						return;
					}

					/*
					      *            IF PA1 = 1000
					      *            IF PA1 = 9000
					                   */
					if (Pa1.Value == 1000)
					{
						Console.WriteLine("PA#S TABLE FOR SSNO=9S OVERFLOW ERROR2");
						BrdmvsCompatibility.PerformThru(this, "_9500HuerwrErrorRtn");
					}

					Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value = AccPatNo;
				}

				if (((int)AccTotAcctBal == 0 && FinAncChg == 0))
				{
					BrdmvsCompatibility.GoTo(_05100FetchOutpatientCsr2);
					return;
				}
				else
				{
					MiscWsFields.AcctsThisSsn.Value = MiscWsFields.AcctsThisSsn.Value + 1;
				}
			}
			else
			{
				if (DataAccess.Sqlcode == +100)
				{
					ProgramFlags.PfOutpCsr2Eof.Value = 'Y';
				}
				else
				{
					Console.WriteLine("ERROR DURING FETCH OF OUTPATIENT CURSOR2");
					BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
				}
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _05100Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _06000FetchOutpatientCsr1a()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("06000-FETCH-OUTPATIENT-CSR1A");
			}

			/*
			      *
			      ****************************************************************
			      ** THIS PARA WILL FETCH ALL OUTPATIENTS WITH  ADMIT DATE OR    *
			      ** ENTERED DATE EQUAL TO EFFECTIVE DATE  AND SEARCHES THE      *
			      ** MGD-CARE-DAYS-TABLE FOR ELIGIBILITY OF IPLAN                *
			      ****************************************************************
			           */
			if (DataAccess.Read())
			{
				HoldAccOutp1Fields.HoldPatNo.Value = DataAccess.ReadIntoLong(0);
				HoldAccOutp1Fields.HoldPatName.Value = DataAccess.ReadIntoString(1);
				HoldAccOutp1Fields.HoldPatType.Value = DataAccess.ReadIntoString(2);
				HoldAccOutp1Fields.HoldEnteredDt.Value = DataAccess.ReadIntoString(3);
				HoldAccOutp1Fields.HoldAdmitDt.Value = DataAccess.ReadIntoString(4);
				HoldAccOutp1Fields.HoldDischDt.Value = DataAccess.ReadIntoString(5);
				HoldAccOutp1Fields.HoldFbillDt.Value = DataAccess.ReadIntoString(6);
				HoldAccOutp1Fields.HoldInsPlan.Value = DataAccess.ReadIntoDecimal(7);
				HoldAccOutp1Fields.HoldFinClass.Value = DataAccess.ReadIntoInt(8);
				HoldAccOutp1Fields.HoldSvcCode.Value = DataAccess.ReadIntoString(9);
				HoldAccOutp1Fields.HoldPatSsno.Value = DataAccess.ReadIntoLong(10);
				HoldAccOutp1Fields.HoldSubUnit.Value = DataAccess.ReadIntoString(11);
				HoldAccOutp1Fields.HoldAncChg.Value = DataAccess.ReadIntoDecimal(12);
				HoldAccOutp1Fields.HoldDailyCareChg.Value = DataAccess.ReadIntoDecimal(13);
			}

			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("SQLCODE     = " + DataAccess.Sqlcode);
			}

			/*
			      *
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				if (DataAccess.Sqlcode == 0)
				{
					Console.WriteLine("HOLD-PAT-NO = " + HoldAccOutp1Fields.HoldPatNo.StringValue);
				}
			}

			/*
			      *
			           */
			switch (DataAccess.Sqlcode)
			{
			case 0:
				if ((string.Compare(HoldAccOutp1Fields.HoldPatType.Value, "OP") == 0 || string.Compare(HoldAccOutp1Fields.HoldPatType.Value, "OPV") == 0 || string.Compare(HoldAccOutp1Fields.HoldPatType.Value, "EP") == 0
				        || string.Compare(HoldAccOutp1Fields.HoldPatType.Value, "EPV") == 0 || string.Compare(HoldAccOutp1Fields.HoldPatType.Value, "SP") == 0 || string.Compare(HoldAccOutp1Fields.HoldPatType.Value, "SPV") == 0)
				        && HoldAccOutp1Fields.HoldAncChg.Value == 0)
				{
					BrdmvsCompatibility.GoTo(_06000FetchOutpatientCsr1a);
					return;
				}

				ProgramFlags.PfPrintInp.Value = 'N';
				break;

			case+100:
				ProgramFlags.PfOutpCsr1Eof.Value = 'Y';
				BrdmvsCompatibility.GoTo(_06000Exit);
				return;
				break;

			default:
				Console.WriteLine("BAD RETURN ON FETCH OF OUTPATIENT CURSOR1A" + " FOR HOSP " + Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value);
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
				break;
			}

			MiscWsFields.HoldCompareIplan.Value = Convert.ToInt32(HoldAccOutp1Fields.HoldInsPlan.Value);
			BrdmvsCompatibility.PerformThru(this, "_06200SearchMgdTable", "_06200Exit");

			if (ProgramFlags.PfPlanFound.Value == 'Y')
			{
				Mvs1dayRptHead3a.Med72hrPayorName.Value = MgdCareDaysTable.MgdCareDaysTab[InsCounter - 1].PayorName.Value;
			}
			else
			{
				Console.WriteLine("PLAN NOT FOUND IN MGD-TABLE");
				BrdmvsCompatibility.GoTo(_06000FetchOutpatientCsr1a);
				return;
			}

			Ss1.Value = +1;

			while (!(Ss1.Value > 1001))
			{
				StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].Value = StoredCsr2Lines.Csr2LineInit.Value;
				Ss1.Value = Ss1.Value+1;
			}

			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("HOLD-PAT-SSNO = " + HoldAccOutp1Fields.HoldPatNo.StringValue);
			}

			/*
			      *
			           */
			Ss1.Value = +1;

			while (!(HoldAccOutp1Fields.HoldPatSsno.Value == Csr1SsnoTable.SsnoEntryTbl[Ss1.Value - 1].SsnoEntry.Value ||
			         Csr1SsnoTable.SsnoEntryTbl[Ss1.Value - 1].SsnoEntry.Value == 0         ||
			         Ss1.Value == SsnoSs1Limit.Value))
			{
				Ss1.Value = Ss1.Value+1;
			}

			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("HOLD-PAT-NO     = " + HoldAccOutp1Fields.HoldPatNo.StringValue);
				Console.WriteLine("SS1             = " + Ss1.StringValue);
				Console.WriteLine("SSNO-ENTRY      = " + Csr1SsnoTable.SsnoEntryTbl[Ss1.Value - 1].SsnoEntry.Value);
				Console.WriteLine("HOLD-ENTERED-DT = " + HoldAccOutp1Fields.HoldEnteredDt.Value);
				Console.WriteLine("LAST-ENTERED-DT = " + MiscWsFields.LastEnteredDt.Value);
				Console.WriteLine("HOLD-PAT-SSNO   = " + HoldAccOutp1Fields.HoldPatSsno.StringValue);
			}

			/*
			      *
			           */
			if (HoldAccOutp1Fields.HoldPatSsno.Value == Csr1SsnoTable.SsnoEntryTbl[Ss1.Value - 1].SsnoEntry.Value)
			{
				if (HoldAccOutp1Fields.HoldPatSsno.Value != 0)
				{
					BrdmvsCompatibility.GoTo(_06000FetchOutpatientCsr1a);
					return;
				}
			}

			HoldAdrPatNo.Value = HoldAccOutp1Fields.HoldPatNo.Value;
			BrdmvsCompatibility.PerformThru(this, "_05010SelectBrbadr", "_05010Exit");
			HoldAccOutp1Fields.HoldBirthDt.Value = AdrBirthDt;

			/*

			      *    IF HOLD-PAT-SSNO = 000000000 OR 999999999
			           */
			if (HoldAccOutp1Fields.HoldPatSsno.Value == 000000000 || HoldAccOutp1Fields.HoldPatSsno.Value == 111111111 || HoldAccOutp1Fields.HoldPatSsno.Value == 222222222
			        || HoldAccOutp1Fields.HoldPatSsno.Value == 333333333 || HoldAccOutp1Fields.HoldPatSsno.Value == 444444444 || HoldAccOutp1Fields.HoldPatSsno.Value == 555555555
			        || HoldAccOutp1Fields.HoldPatSsno.Value == 666666666 || HoldAccOutp1Fields.HoldPatSsno.Value == 777777777 || HoldAccOutp1Fields.HoldPatSsno.Value == 888888888
			        || HoldAccOutp1Fields.HoldPatSsno.Value == 999999999 || HoldAccOutp1Fields.HoldPatSsno.Value == 123456789)
			{
				Pa1.Value = +1;

				while (!(HoldAccOutp1Fields.HoldPatNo.Value == Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value ||
				         Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value == 0       ||
				         /*
				               *                  PA1 = 1000
				               *                  PA1 = 9000
				                                  */
				         Pa1.Value == 1000))
				{
					Pa1.Value = Pa1.Value+1;
				}

				if (HoldAccOutp1Fields.HoldPatNo.Value == Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value)
				{
					BrdmvsCompatibility.GoTo(_06000FetchOutpatientCsr1a);
					return;
				}

				/*
				      *        IF PA1 = 1000
				      *        IF PA1 = 9000
				               */
				if (Pa1.Value == 1000)
				{
					Console.WriteLine("PA#S TABLE FOR SSNO=9S OVERFLOW ERROR3");
					BrdmvsCompatibility.PerformThru(this, "_9500HuerwrErrorRtn");
				}

				Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value = HoldAccOutp1Fields.HoldPatNo.Value;
				HoldAdrPatNo.Value = HoldAccOutp1Fields.HoldPatNo.Value;
				BrdmvsCompatibility.PerformThru(this, "_05010SelectBrbadr", "_05010Exit");
				HoldAccOutp1Fields.HoldBirthDt.Value = AdrBirthDt;
			}
			else
			{
				if (Ss1.Value == SsnoSs1Limit.Value)
				{
					Console.WriteLine("CURSOR1A SSNO TABLE OVERFLOW ERROR");
					BrdmvsCompatibility.PerformThru(this, "_9500HuerwrErrorRtn");
				}
				else
				{
					Csr1SsnoTable.SsnoEntryTbl[Ss1.Value - 1].SsnoEntry.Value = HoldAccOutp1Fields.HoldPatSsno.Value;
				}
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _06000Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _06100FetchOutpatientCsr2a()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("06100-FETCH-OUTPATIENT-CSR2A");
			}

			/*
			      *
			      *****************************************************************
			      ** THIS PARA WILL FETCH ALL OUTPATIENTS THAT MATCH THE          *
			      ** OUTPATIENTS FETCHED IN CURSOR ACC-OUTP-CSR1A WITH THE FIRST  *
			      ** 4 LETTERS OF NAME AND EITHER THE SOCIAL SECURITY NUMBER OR   *
			      ** AGE.                                                         *
			      *****************************************************************

			           */
			if (DataAccess.Read())
			{
				AccPatNo = Convert.ToInt16(DataAccess.ReadIntoString(0));
				AccPatName = DataAccess.ReadIntoString(1);
				AccPatType = DataAccess.ReadIntoString(2);
				AccEnteredDt = DataAccess.ReadIntoString(3);
				AccAdmitDt = DataAccess.ReadIntoString(4);
				AccTotAcctBal = DataAccess.ReadIntoString(5);
				AccDischDt = DataAccess.ReadIntoString(6);
				AccFbillDt = DataAccess.ReadIntoString(7);
				AccInsPlan1 = Convert.ToInt16(DataAccess.ReadIntoString(8));
				AccFinClass =  Convert.ToInt16(DataAccess.ReadIntoString(9));
				AccServCd = DataAccess.ReadIntoString(10);
				AccPatSsno.value = Convert.ToInt16(DataAccess.ReadIntoString(11));
				AccSubUnit = DataAccess.ReadIntoString(12);
				FinAncChg =Convert.ToDecimal(DataAccess.ReadIntoString(13));
				FinDailyCareChg.value = DataAccess.ReadIntoString(14);
			}

			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("SQLCODE = " + DataAccess.Sqlcode);
			}

			/*
			      *
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				if (DataAccess.Sqlcode == 0)
				{
					Console.WriteLine("ACC-PAT-NO         " + AccPatNo);
					Console.WriteLine("ACC-TOT-ACCT-BAL = " + AccTotAcctBal);
					Console.WriteLine("FIN-ANC-CHG      = " + FinAncChg);
				}
			}

			/*
			      *
			           */
			if (DataAccess.Sqlcode == 0)
			{
				/*
				      *        IF HOLD-PAT-TYPE = ('OP' OR 'OPV' OR 'EP' OR
				               */
				if ((AccPatType == "OP" || AccPatType == "OPV" || AccPatType == "EP"
				        || AccPatType == "EPV" || AccPatType == "SP" || AccPatType == "SPV")
				        && FinAncChg == 0)
				{
					BrdmvsCompatibility.GoTo(_06100FetchOutpatientCsr2a);
					return;
				}

				/*
				      *        IF ACC-PAT-SSNO = 000000000 OR 999999999
				               */
				if (AccPatSsno.value == 000000000 || AccPatSsno.value == 111111111 || AccPatSsno.value == 222222222
				        || AccPatSsno.value == 333333333 || AccPatSsno.value == 444444444 || AccPatSsno.value == 555555555
				        || AccPatSsno.value == 666666666 || AccPatSsno.value == 777777777 || AccPatSsno.value == 888888888
				        || AccPatSsno.value == 999999999 || AccPatSsno.value == 123456789)
				{
					Pa1.Value = +1;

					while (!(AccPatNo == Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value ||
					         Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value == 0      ||
					         /*
					               *                      PA1 = 1000
					               *                      PA1 = 9000
					                                      */
					         Pa1.Value == 1000))
					{
						Pa1.Value = Pa1.Value+1;
					}

					if (AccPatNo == Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value)
					{
						BrdmvsCompatibility.GoTo(_06100FetchOutpatientCsr2a);
						return;
					}

					/*
					      *            IF PA1 = 1000
					      *            IF PA1 = 9000
					                   */
					if (Pa1.Value == 1000)
					{
						Console.WriteLine("PA#S TABLE FOR SSNO=9S OVERFLOW ERROR4");
						BrdmvsCompatibility.PerformThru(this, "_9500HuerwrErrorRtn");
					}

					Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value = AccPatNo;
					/*
					      *        END-IF
					      *        ADD 1 TO ACCTS-THIS-SSN
					                   */
					HoldAdrPatNo.Value = AccPatNo;
					BrdmvsCompatibility.PerformThru(this, "_05010SelectBrbadr", "_05010Exit");

					/*
					      *            IF HOLD-PAT-AGE = DEM-PAT-AGE
					                   */
					if (HoldAccOutp1Fields.HoldBirthDt.Value == AdrBirthDt)
					{
						MiscWsFields.AcctsThisSsn.Value = MiscWsFields.AcctsThisSsn.Value + 1;
					}
				}
				else
				{
					MiscWsFields.AcctsThisSsn.Value = MiscWsFields.AcctsThisSsn.Value + 1;
				}
			}
			else
			{
				if (DataAccess.Sqlcode == +100)
				{
					ProgramFlags.PfOutpCsr2Eof.Value = 'Y';
				}
				else
				{
					Console.WriteLine("ERROR DURING FETCH OF OUTPATIENT CURSOR2A");
					BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
				}
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _06100Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _06200SearchMgdTable()
		{
			ProgramFlags.PfMgdTable.Value = 'N';
			ProgramFlags.PfPlanFound.Value = 'N';

			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("06200-SEARCH-MGD-TABLE");
			}

			/*
			      *
			       */
			InsCounter = 1;

			while (InsCounter <= MgdCareDaysTable.MgdCareDaysTab.Length)
			{
				if (MgdCareDaysTable.MgdCareDaysTab[InsCounter - 1].InsurancePlan.Value == MiscWsFields.HoldCompareIplan.Value)
				{
					ProgramFlags.PfPlanFound.Value = 'Y';
					break;
				}

				InsCounter ++;
			}

			if (InsCounter == MgdCareDaysTable.MgdCareDaysTab.Length + 1)
			{
				ProgramFlags.PfMgdTable.Value = 'Y';
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _06200Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08000WriteOutpatientData()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08000-WRITE-OUTPATIENT-DATA");
			}

			/*
			      *
			      *****************************************************************
			      ** THIS PARA WILL WRITE OUT THE 2 INPATIENT LINES. IF LINE COUNT*
			      ** IS GREATER THAN 8, THAN A DASH LINE WILL BE WRITTEN OUT TO   *
			      ** SEPARATE EACH INPATIENT ACCOUNT.                             *
			      *****************************************************************
			      *    IF HOLD-CURRENT-FCLASS = ZEROS
			      *       MOVE HOLD-FIN-CLASS TO HOLD-CURRENT-FCLASS
			      *       PERFORM 08300-WRITE-HEADING-LINES THRU 08300-EXIT
			      *    ELSE
			      *       IF HOLD-CURRENT-FCLASS = HOLD-FIN-CLASS
			      *          IF LINE-CTR > 55
			      *             PERFORM 08300-WRITE-HEADING-LINES THRU 08300-EXIT
			      *          END-IF
			      *       ELSE
			      *          MOVE HOLD-FIN-CLASS TO HOLD-CURRENT-FCLASS
			      *          PERFORM 08300-WRITE-HEADING-LINES THRU 08300-EXIT
			      *       END-IF
			      *    END-IF.
			           */
			MiscWsFields.HoldTemp1InsPlan.Value = Convert.ToInt32(HoldAccOutp1Fields.HoldInsPlan.Value);
			MiscWsFields.HoldTemp3InsPlan.Value = (MiscWsFields.HoldTemp1InsPlan.GetRange(0, 3) + "-" + MiscWsFields.HoldTemp1InsPlan.GetRange(3, 2)).PadRight(6, ' ').Substring(0, 6);
			Mvs1dayRptHead3a.Med72hrIplan.Value = MiscWsFields.HoldTemp3InsPlan.Value;
			DetlLine2.DetlInsPlan.Value = MiscWsFields.HoldTemp3InsPlan.Value;
			MiscWsFields.HoldTotOutp1Found.Value = MiscWsFields.HoldTotOutp1Found.Value + 1;

			if (MiscWsFields.HoldCurrentInsplan.Value == 0)
			{
				MiscWsFields.HoldCurrentInsplan.Value = HoldAccOutp1Fields.HoldInsPlan.Value;
				BrdmvsCompatibility.PerformThru(this, "_08300WriteHeadingLines", "_08300Exit");
			}
			else
			{
				if (MiscWsFields.HoldCurrentInsplan.Value == HoldAccOutp1Fields.HoldInsPlan.Value)
				{
					if (CountersAndTotals.LineCtr.Value > 55)
					{
						BrdmvsCompatibility.PerformThru(this, "_08300WriteHeadingLines", "_08300Exit");
					}
				}
				else
				{
					MiscWsFields.HoldCurrentInsplan.Value = HoldAccOutp1Fields.HoldInsPlan.Value;
					BrdmvsCompatibility.PerformThru(this, "_08300WriteHeadingLines", "_08300Exit");
				}
			}

			if (CountersAndTotals.LineCtr.Value > 8)
			{
				ReportLine.Value = DashLine.Value;
				Mvs1dayRpt.Write(ReportLine.Value);
				CountersAndTotals.LineCtr.Value = CountersAndTotals.LineCtr.Value + 1;
			}

			DetlLine1.DetlPatName.Value = HoldAccOutp1Fields.HoldPatName.Value;
			MiscWsFields.HoldDb2Dt.Value = HoldAccOutp1Fields.HoldEnteredDt.Value;
			DetlLine1.DetlEnterDt.Value = Convert.ToString((MiscWsFields.HoldDb2Dt.HoldDb2Mm.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Dd.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Yy.Value).PadRight(8, ' ').Substring(0, 8));
			MiscWsFields.HoldSsno.Value = HoldAccOutp1Fields.HoldPatSsno.Value;
			/*
			      *    STRING HOLD-PART1-SSNO '-' HOLD-PART2-SSNO '-'
			      *           HOLD-PART3-SSNO DELIMITED BY SIZE
			      *       INTO DETL-PAT-SSN.
			      ******************************************************************
			      **  HARD CODING THESE VALUES SINCE THE PRIMARY OUTPATIENT WILL BE*
			      **  PRINTED BEFORE THE MATCHING OR OVERLAPPING OUTPATIENTS.      *
			      **  ONCE THE ACCOUNT IS PRINTED IN THE MVST01 REPORT, BRBDEM WILL*
			      **  BE UPDATED USING THIS VALUES.
			      ******************************************************************
			           */
			DclbrbdemType Dclbrbdem = new DclbrbdemType();
			WsDemHoldFbillInd.Initialize();
			DclbrbmbhType Dclbrbmbh = new DclbrbmbhType();
			DemStack = MiscWsFields.HoldStackId.Value;
			DemCoId = Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value;
			DemPatNo = HoldAccOutp1Fields.HoldPatNo.Value;
			BrdmvsCompatibility.PerformThru(this, "_08100ReadBrbdem", "_08100Exit");

			/*

			      *    IF WS-DEM-HOLD-FBILL-IND NOT = 'Y'
			      *       AND WS-MGD-CARE-DAYS-HOLD = 'Y'
			      *       MOVE 'Y'                            TO DETL-HOLD-IND
			      *       MOVE 'BRDMVS'                       TO DETL-USERID
			      *       MOVE 'SYSTEM PAYMENT WINDOW REVIEW' TO DETL-HOLD-RSN
			      *    END-IF.
			           */
			if (WsMgdCareDaysHold.Value == 'Y')
			{
				if (WsDemHoldFbillInd.Value != 'Y')
				{
					DetlLine1.DetlHoldInd.Value = 'Y';
					DetlLine1.DetlUserid.Value = "BRDMVS";
					DetlLine1.DetlHoldRsn.Value = "SYSTEM PAYMENT WINDOW REVIEW";
				}
				else
				{
					BrdmvsCompatibility.PerformThru(this, "_08570SelectBrbmbh", "_08570Exit");
				}
			}

			ReportLine.Value = DetlLine1.Value;
			Mvs1dayRpt.Write(ReportLine.Value);
			CountersAndTotals.LineCtr.Value = CountersAndTotals.LineCtr.Value + 1;

			if (HoldAccOutp1Fields.HoldAncChg.Value == 0
			        &&
			        ProgramFlags.PfOverlapSection.Value == 'N')
			{
				BrdmvsCompatibility.GoTo(_08000SkipCsr1Line);
				return;
			}

			DetlLine2.DetlSubUnit.Value = HoldAccOutp1Fields.HoldSubUnit.Value;
			DetlLine2.DetlPatNum.Value = HoldAccOutp1Fields.HoldPatNo.Value;

			if (string.Compare(HoldAccOutp1Fields.HoldAdmitDt.Value, "0001-01-01") == 0)
			{
				DetlLine2.DetlAdmitDt.Value = new string(' ', 8);
			}
			else
			{
				MiscWsFields.HoldDb2Dt.Value = HoldAccOutp1Fields.HoldAdmitDt.Value;
				DetlLine2.DetlAdmitDt.Value = Convert.ToString((MiscWsFields.HoldDb2Dt.HoldDb2Mm.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Dd.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Yy.Value).PadRight(8, ' ').Substring(0, 8));
			}

			if (string.Compare(HoldAccOutp1Fields.HoldDischDt.Value, "0001-01-01") == 0)
			{
				DetlLine2.DetlDischDt.Value = new string(' ', 8);
			}
			else
			{
				MiscWsFields.HoldDb2Dt.Value = HoldAccOutp1Fields.HoldDischDt.Value;
				DetlLine2.DetlDischDt.Value = Convert.ToString((MiscWsFields.HoldDb2Dt.HoldDb2Mm.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Dd.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Yy.Value).PadRight(8, ' ').Substring(0, 8));
			}

			DetlLine2.DetlFinClass.Value = HoldAccOutp1Fields.HoldFinClass.Value;
			DetlLine2.DetlPatType.Value = HoldAccOutp1Fields.HoldPatType.Value;
			DetlLine2.DetlSvcCode.Value = HoldAccOutp1Fields.HoldSvcCode.Value;
			/*
			      *********************************************************
			      *  FOLLOWING COMPUTE IS NOT ACTUALLY NECESSARY, SINCE
			      *  HOLD-DAILY-CARE-CHG WILL ALWAYS BE ZERO FOR OUTPATIENT
			      *  ACCOUNTS.
			      *********************************************************
			           */
			MiscWsFields.HoldTotChgs1.Value = HoldAccOutp1Fields.HoldAncChg.Value + HoldAccOutp1Fields.HoldDailyCareChg.Value;
			DetlLine2.DetlTotChgs.Value = MiscWsFields.HoldTotChgs1.Value;

			if (string.Compare(HoldAccOutp1Fields.HoldFbillDt.Value, "0001-01-01") == 0)
			{
				DetlLine2.DetlFbillDt.Value = new string(' ', 8);
			}
			else
			{
				MiscWsFields.HoldDb2Dt.Value = HoldAccOutp1Fields.HoldFbillDt.Value;
				DetlLine2.DetlFbillDt.Value = Convert.ToString((MiscWsFields.HoldDb2Dt.HoldDb2Mm.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Dd.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Yy.Value).PadRight(8, ' ').Substring(0, 8));
			}

			DclbrbmedType Dclbrbmed = new DclbrbmedType();
			DclbrbdxsType Dclbrbdxs = new DclbrbdxsType();
			MedStack = MiscWsFields.HoldStackId.Value;
			DxsStack = MiscWsFields.HoldStackId.Value;
			MedCoId = Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value;
			DxsCoId = Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value;
			MedPatNo = HoldAccOutp1Fields.HoldPatNo.Value.ToString();
			DxsPatNo = HoldAccOutp1Fields.HoldPatNo.Value.ToString();
			BrdmvsCompatibility.PerformThru(this, "_08200ReadBrbmed", "_08200Exit");
			WsIcdVersInd.Value = '9';
			BrdmvsCompatibility.PerformThru(this, "_08200ReadBrbdxs", "_08200BrbdxsExit");
			/*
			      *    MOVE MED-DIAG-CD1            TO DETL-PRIN-DIAG.
			           */
			DetlLine2.DetlPrinDiag.Value = DxsDiagCd;
			DetlLine2.DetlPrinDiagDesc.Value = MedPrinDiagDesc;

			if (DetlLine2.DetlPrinDiag.Value != new string(' ', 7))
			{
				DetlLine2.DetlIcdVer.Value = '9';
			}

			DetlLine2.DetlComments.Value = new string(' ', 15);
			ReportLine.Value = DetlLine2.Value;
			Mvs1dayRpt.Write(ReportLine.Value);
			CountersAndTotals.LineCtr.Value = CountersAndTotals.LineCtr.Value + 1;

			if (SwIcdGoLiveProcess.Value == 'Y')
			{
				DetlLine2_0.Initialize();
				WsIcdVersInd.Value = '0';
				BrdmvsCompatibility.PerformThru(this, "_08200ReadBrbdxs", "_08200BrbdxsExit");
				DetlLine2_0.DetlPrinDiag_0.Value = DxsDiagCd;
				DetlLine2_0.DetlPrinDiagD_0.Value = MedPrinDiagDescI10;

				if (DetlLine2_0.DetlPrinDiag_0.Value != new string(' ', 7))
				{
					DetlLine2_0.DetlIcdVer_0.Value = WsIcdVersInd.Value;
				}

				DetlLine2_0.DetlComments_0.Value = new string(' ', 15);
				ReportLine.Value = DetlLine2_0.Value;
				Mvs1dayRpt.Write(ReportLine.Value);
				CountersAndTotals.LineCtr.Value = CountersAndTotals.LineCtr.Value + 1;
			}

			ProgramFlags.PfRecordsWritten.Value = 'Y';

			/*

			      *    IF WS-DEM-HOLD-FBILL-IND NOT = 'Y'
			      *       AND WS-MGD-CARE-DAYS-HOLD = 'Y'
			      *       AND HOLD-FBILL-DT = '0001-01-01'
			      *       PERFORM 08250-UPDATE-BRBDEM THRU 08250-EXIT
			      *    END-IF.
			           */
			if (WsMgdCareDaysHold.Value == 'Y'
			        && string.Compare(HoldAccOutp1Fields.HoldFbillDt.Value, "0001-01-01") == 0)
			{
				if (WsDemHoldFbillInd.Value != 'Y')
				{
					BrdmvsCompatibility.PerformThru(this, "_08560InsertBrbmbh", "_08560Exit");
					BrdmvsCompatibility.PerformThru(this, "_08250UpdateBrbdem", "_08250Exit");
				}
				else
				{
					BrdmvsCompatibility.PerformThru(this, "_08550ReviewBrbmbh", "_08550Exit");
				}
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08000SkipCsr1Line()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08000-SKIP-CSR1-LINE");
			}

			/*
			      *
			           */
			Ss1.Value = +1;

			while (!(StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StPatNo.Value == 0))
			{
				if (Ss1.Value > +2)
				{
					if (CountersAndTotals.LineCtr.Value > 55)
					{
						BrdmvsCompatibility.PerformThru(this, "_08300WriteHeadingLines", "_08300Exit");
					}
				}

				DetlLine2.DetlSubUnit.Value = StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StSubUnit.Value;
				DetlLine2.DetlPatNum.Value = StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StPatNo.Value;

				if (string.Compare(StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StAdmitDt.Value, "0001-01-01") == 0)
				{
					DetlLine2.DetlAdmitDt.Value = new string(' ', 8);
				}
				else
				{
					MiscWsFields.HoldDb2Dt.Value = StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StAdmitDt.Value;
					DetlLine2.DetlAdmitDt.Value = Convert.ToString((MiscWsFields.HoldDb2Dt.HoldDb2Mm.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Dd.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Yy.Value).PadRight(8, ' ').Substring(0, 8));
				}

				if (AccDischDt == "0001-01-01")
				{
					DetlLine2.DetlDischDt.Value = new string(' ', 8);
				}
				else
				{
					MiscWsFields.HoldDb2Dt.Value = AccDischDt;
					DetlLine2.DetlDischDt.Value = Convert.ToString((MiscWsFields.HoldDb2Dt.HoldDb2Mm.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Dd.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Yy.Value).PadRight(8, ' ').Substring(0, 8));
				}

				MiscWsFields.HoldTemp2InsPlan.Value = Convert.ToInt32(StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StIplan.Value);
				DetlLine2.DetlInsPlan.Value = (MiscWsFields.HoldTemp2InsPlan.GetRange(0, 3) + "-" + MiscWsFields.HoldTemp2InsPlan.GetRange(3, 2)).PadRight(6, ' ').Substring(0, 6);
				DetlLine2.DetlFinClass.Value = StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StFc.Value;
				DetlLine2.DetlPatType.Value = StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StType.Value;
				DetlLine2.DetlSvcCode.Value = StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StSvcCode.Value;
				DetlLine2.DetlTotChgs.Value = StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StChgs.Value;

				if (string.Compare(StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StFbillDt.Value, "0001-01-01") == 0)
				{
					DetlLine2.DetlFbillDt.Value = new string(' ', 8);
				}
				else
				{
					MiscWsFields.HoldDb2Dt.Value = StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StFbillDt.Value;
					DetlLine2.DetlFbillDt.Value = Convert.ToString((MiscWsFields.HoldDb2Dt.HoldDb2Mm.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Dd.Value + "-" + MiscWsFields.HoldDb2Dt.HoldDb2Yy.Value).PadRight(8, ' ').Substring(0, 8));
				}

				DclbrbmedType Dclbrbmed = new DclbrbmedType();
				DclbrbdxsType Dclbrbdxs = new DclbrbdxsType();
				DetlLine2.DetlPrinDiag.Value = StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StDiag.Value;
				DetlLine2.DetlPrinDiagDesc.Value = StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StDiagDisc.Value;

				if (DetlLine2.DetlPrinDiag.Value != new string(' ', 7))
				{
					DetlLine2.DetlIcdVer.Value = '9';
				}

				DetlLine2.DetlComments.Value = new string(' ', 15);
				ReportLine.Value = DetlLine2.Value;
				Mvs1dayRpt.Write(ReportLine.Value);
				CountersAndTotals.LineCtr.Value = CountersAndTotals.LineCtr.Value + 1;

				if (SwIcdGoLiveProcess.Value == 'Y')
				{
					DetlLine2_0.Initialize();
					DetlLine2_0.DetlPrinDiag_0.Value = StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StDiag_0.Value;
					DetlLine2_0.DetlPrinDiagD_0.Value = StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StDiagDisc_0.Value;

					if (DetlLine2_0.DetlPrinDiag_0.Value != new string(' ', 7))
					{
						DetlLine2_0.DetlIcdVer_0.Value = '0';
					}

					DetlLine2_0.DetlComments_0.Value = new string(' ', 15);
					ReportLine.Value = DetlLine2_0.Value;
					Mvs1dayRpt.Write(ReportLine.Value);
					CountersAndTotals.LineCtr.Value = CountersAndTotals.LineCtr.Value + 1;
				}

				DclbrbdemType Dclbrbdem = new DclbrbdemType();
				WsDemHoldFbillInd.Initialize();
				DclbrbmbhType Dclbrbmbh = new DclbrbmbhType();
				DemStack = MiscWsFields.HoldStackId.Value;
				DemCoId = Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value;
				DemPatNo = StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StPatNo.Value;
				BrdmvsCompatibility.PerformThru(this, "_08100ReadBrbdem", "_08100Exit");

				/*

				      *        IF WS-DEM-HOLD-FBILL-IND NOT = 'Y'
				      *           AND WS-MGD-CARE-DAYS-HOLD = 'Y'
				      *           AND ST-FBILL-DT (SS1) = '0001-01-01'
				      *           PERFORM 08250-UPDATE-BRBDEM THRU 08250-EXIT
				      *        END-IF
				               */
				if (WsMgdCareDaysHold.Value == 'Y'
				        /*
				              *           AND HOLD-FBILL-DT = '0001-01-01'
				                          */
				        && string.Compare(StoredCsr2Lines.StoredCsr2Line[Ss1.Value - 1].StFbillDt.Value, "0001-01-01") == 0)
				{
					if (WsDemHoldFbillInd.Value != 'Y')
					{
						BrdmvsCompatibility.PerformThru(this, "_08560InsertBrbmbh", "_08560Exit");
						BrdmvsCompatibility.PerformThru(this, "_08250UpdateBrbdem", "_08250Exit");
					}
					else
					{
						BrdmvsCompatibility.PerformThru(this, "_08550ReviewBrbmbh", "_08550Exit");
					}
				}

				Ss1.Value = Ss1.Value+1;
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08000Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08100ReadBrbdem()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08100-READ-BRBDEM");
			}

			/*
			      *
			           */
			WsMgdCareDaysHold.Value =  ' ';
			WsAccInsPlan1.MoveZero();

			if (DataAccess.Sqlcode == 0 || DataAccess.Sqlcode == 100)
			{
				if (WsAccInsPlan1.Value == 0 || DataAccess.Sqlcode == 100)
				{
					WsMgdCareDaysHold.Value =  ' ';
				}
			}
			else
			{
				Console.WriteLine("BAD SELECT FROM DMBIPM TABLE");
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
			}

			/*
			      ****************************************************************
			      ** THIS PARA WILL READ THE BRBDEM TABLE TO GET THE HOLD FBILL  *
			      ** IND. IF ALREADY SET THEN THIS ACCOUNT WONT BE PUT ON HOLD.  *
			      ****************************************************************
			           */
			switch (DataAccess.Sqlcode)
			{
			case 0:
				break;

			case+100:
				Console.WriteLine("BRBDEM SQLCODE: " + DataAccess.Sqlcode);
				break;

			default:
				Console.WriteLine("BAD SELECT FROM BRBDEM TABLE");
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
				break;
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08100Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08200ReadBrbmed()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08200-READ-BRBMED");
			}

			/*
			      *
			      ****************************************************************
			      ** THIS PARA WILL READ THE BRBMED TABLE TO GET THE PRINCIPAL   *
			      ** DIAGNOSIS CODE AND DESCRIPTION FOR THE ACCOUNT.             *
			      ****************************************************************
			           */
			switch (DataAccess.Sqlcode)
			{
			case 0:
				break;

			case+100:
				Console.WriteLine("BRBMED SQLCODE: " + DataAccess.Sqlcode);
				break;

			default:
				Console.WriteLine("BAD SELECT FROM BRBMED TABLE");
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
				break;
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08200Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08200ReadBrbdxs()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08200-READ-BRBDXS");
			}

			/*
			      *
			      ****************************************************************
			      ** THIS PARA WILL READ THE BRBDXS TABLE TO GET THE PRINCIPAL   *
			      ** DIAGNOSIS CODE AND DESCRIPTION FOR THE ACCOUNT.             *
			      ****************************************************************
			           */
			switch (DataAccess.Sqlcode)
			{
			case 0:
				break;

			case+100:
				Console.WriteLine("BRBDXS SQLCODE: " + DataAccess.Sqlcode);
					DxsDiagCdType DxsDiagCd = new DxsDiagCdType();
					DxsIcdVersionIndType DxsIcdVersionInd = new DxsIcdVersionIndType();
				break;

			default:
				Console.WriteLine("BAD SELECT FROM BRBDXS TABLE");
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
				break;
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08200BrbdxsExit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08250UpdateBrbdem()
		{
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08200-READ-BRBMED");
			}

			BrdmvsCompatibility.PerformThru(this, "_08255GetDate", "_08255Exit");

			if (DataAccess.Sqlcode == 0)
			{
				BrdmvsCompatibility.PerformThru(this, "_08260SelectNfcDa", "_08260Exit");
				CommitCnt.Value = CommitCnt.Value + 1;

				if (CommitCnt.Value >= PgmCommitFreq.value)
				{
					if (DataAccess.Sqlcode == 0)
					{
					}
					else
					{
						Console.WriteLine("BAD COMMMIT ON BRBDEM TABLE");
						BrdmvsCompatibility.PerformThru(this, "_09400Db2Error");
					}

					CommitCnt.MoveZero();
				}
			}
			else
			{
				if (DataAccess.Sqlcode == +100)
				{
				}
				else
				{
					Console.WriteLine("BAD UPDATE IN BRBDEM TABLE");
					BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
				}
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08250Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08255GetDate()
		{
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08255-GET-DATE ");
			}

			WsCurrTime.Value = new string(' ', 26);

			if (DataAccess.Sqlcode != 0)
			{
				Console.WriteLine("BAD SELECT FROM BRBSYS FOR TIMESTAMP");
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08255Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08260SelectNfcDa()
		{
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08260-SELECT-NFC-DA ");
			}

			DclbrbnfcType Dclbrbnfc = new DclbrbnfcType();
			NfcStack = DemStack;
			NfcCoId = DemCoId;
			NfcPatNo = DemPatNo;

			if (DataAccess.Sqlcode == 0)
			{
                string NfcDaHoldFbillInd = "Y";
                BrdmvsCompatibility.PerformThru(this, "_08265UpdateInterfaceRow");
			}
			else
			{
				if (DataAccess.Sqlcode == +100)
				{
					Console.WriteLine("DA ROW ON BRBNFC NOT FOUND FOR " + DemPatNo + " IN HOSPITAL " + AccCoId);
				}
				else
				{
					Console.WriteLine("BAD SELECT FROM BRBNFC FOR DA RECORDS");
					BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
				}
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08260Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08265UpdateInterfaceRow()
		{
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08265-UPDATE-INTERFACE-ROW ");
			}

			if (DataAccess.Sqlcode == 0 || DataAccess.Sqlcode == +100)
			{
			}
			else
			{
				Console.WriteLine("BAD UPDATE FOR DA RECORDS IN BRBNFC");
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08265Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08300WriteHeadingLines()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08300-WRITE-HEADING-LINES");
			}

			/*
			      *
			      ****************************************************************
			      ** WRITE REPORT HEADER LINES                                   *
			      ****************************************************************
			           */
			CountersAndTotals.PageCount.Value = CountersAndTotals.PageCount.Value + 1;
			Mvs1dayRptHead1.Med72hrHead1.Value = HdrtrlParams.HdrtrlUnitNameLine.Value;
			Mvs1dayRptHead1.Med72hrPgNo.Value = CountersAndTotals.PageCount.Value;
			ReportLine.Value = Mvs1dayRptHead1.Value;
			Mvs1dayRpt.Write(ReportLine.Value);
			CountersAndTotals.LineCtr.Value = 1;
			Mvs1dayRptHead2.Med72hrHead2.Value = HdrtrlParams.HdrtrlTitleLine.Value;
			ReportLine.Value = Mvs1dayRptHead2.Value;
			Mvs1dayRpt.Write(ReportLine.Value);
			CountersAndTotals.LineCtr.Value = CountersAndTotals.LineCtr.Value + 1;

			/*
			      *    WRITE REPORT-LINE FROM MVS1DAY-RPT-HEAD3
			      *       AFTER ADVANCING 1 LINE.
			           */
			if (ProgramFlags.PfOverlapSection.Value == 'Y')
			{
				ReportLine.Value = Mvs1dayRptHead3.Value;
				Mvs1dayRpt.Write(ReportLine.Value);
				CountersAndTotals.LineCtr.Value = CountersAndTotals.LineCtr.Value + 1;
			}

			/*
			      *    ADD 1                      TO LINE-CTR.
			      *    EVALUATE TRUE
			      *       WHEN HOLD-CURRENT-FCLASS = 0
			      *          CONTINUE
			      *       WHEN HOLD-CURRENT-FCLASS = HOLD-FCLASS1
			      *          WRITE REPORT-LINE FROM MVS1DAY-RPT-HEAD4A
			      *             AFTER ADVANCING 2 LINES
			      *          ADD 2 TO LINE-CTR
			      *       WHEN OTHER
			      *       WHEN HOLD-CURRENT-FCLASS = HOLD-FCLASS2
			      *          WRITE REPORT-LINE FROM MVS1DAY-RPT-HEAD4B
			      *             AFTER ADVANCING 2 LINES
			      *          ADD 2 TO LINE-CTR
			      *       WHEN OTHER
			      *          WRITE REPORT-LINE FROM MVS1DAY-RPT-HEAD4C
			      *             AFTER ADVANCING 2 LINES
			      *          ADD 2 TO LINE-CTR
			      *    END-EVALUATE.
			           */
			if (MiscWsFields.HoldTotOutp1Found.Value == 0)
			{
				Mvs1dayRptHead3a.Med72hrPayorName.Value = new string(' ', 25);
				Mvs1dayRptHead3a.Med72hrIplan.Value = new string(' ', 6);
			}

			ReportLine.Value = Mvs1dayRptHead3a.Value;
			Mvs1dayRpt.Write(ReportLine.Value);
			ReportLine.Value = Mvs1dayRptHead4.Value;
			Mvs1dayRpt.Write(ReportLine.Value);
			ReportLine.Value = Mvs1dayRptHead5.Value;
			Mvs1dayRpt.Write(ReportLine.Value);
			ReportLine.Value = Mvs1dayRptHead6.Value;
			Mvs1dayRpt.Write(ReportLine.Value);
			CountersAndTotals.LineCtr.Value = CountersAndTotals.LineCtr.Value + 4;
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08300Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08400WriteNoDataLine()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08400-WRITE-NO-DATA-LINE");
			}

			/*
			      *
			      ***************************************************************
			      ** WRITE A NO-DATA LINE ON REPORT
			      ***************************************************************
			           */
			ReportLine.Value = NoDataLine.Value;
			Mvs1dayRpt.Write(ReportLine.Value);
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08400Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08500WriteTotalLines()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08500-WRITE-TOTAL-LINES");
			}

			/*
			      *
			      ***************************************************************
			      ** TOTAL LINES FOR EACH HOSPITAL.                             *
			      ***************************************************************
			           */
			TotalLine1.TotPatCount1.Value = MiscWsFields.HoldTotOutp1Found.Value;
			ReportLine.Value = TotalLine1.Value;
			Mvs1dayRpt.Write(ReportLine.Value);
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08500Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08550ReviewBrbmbh()
		{
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08550-REVIEW-BRBMBH");
			}

			if (DataAccess.Sqlcode == 0)
			{
			}
			else
			{
				if (DataAccess.Sqlcode == 100)
				{
					BrdmvsCompatibility.PerformThru(this, "_08560InsertBrbmbh", "_08560Exit");
					BrdmvsCompatibility.PerformThru(this, "_08250UpdateBrbdem", "_08250Exit");
				}
				else
				{
					Console.WriteLine("BAD UPDATE/SELECT IN BRBMBH TABLE");
					BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
				}
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08550Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08560InsertBrbmbh()
		{
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08560-INSERT-BRBMBH");
			}

            char MbhStack = DemStack;
            int MbhCoId = DemCoId;
            long MbhPatNo = DemPatNo;
            string MbhHoldInd = "Y";
            object MbhRelsUserId = null;
            string MbhHoldDate = MiscWsFields.WsDb2EffDate.Value;
            switch (DataAccess.Sqlcode)
			{
			case 0:
				break;

			default:
				Console.WriteLine("BAD INSERT IN BRBMBH TABLE");
				BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
				break;
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08560Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08570SelectBrbmbh()
		{
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("08570-SELECT-BRBMBH");
			}

			if (DataAccess.Sqlcode == 0)
			{
			}
			else
			{
				if (DataAccess.Sqlcode == 100)
				{
					DetlLine1.DetlHoldInd.Value = 'Y';
					DetlLine1.DetlUserid.Value = "BRDMVS";
					DetlLine1.DetlHoldRsn.Value = "SYSTEM PAYMENT WINDOW REVIEW";
				}
				else
				{
					Console.WriteLine("BAD SELECT IN BRBMBH TABLE");
					BrdmvsCompatibility.PerformThru(this, "_09400Db2Error", "_09400Exit");
				}
			}

			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _08570Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _09200HeaderTrailer()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("09200-HEADER-TRAILER");
			}

			/*
			      *
			      ***************************************************************
			      ** CALLS SUB-PROGRAM "HDRTRL" WHICH WILL WRITE HEADER AND     *
			      ** TRAILER RECORDS TO THE OUTPUT REPORT FILE.  THIS WILL ALLOW*
			      ** THE REPORT MANAGER TO ROUTE THE REPORT TO THE CORRECT      *
			      ** DESTINATION.                                               *
			      ***************************************************************
			           */
			HdrtrlParams.PlApplrptCode.Value = RptId.Value;
			HdrtrlParams.PlOutputDdname.Value = "MVS1DYRP";
			HdrtrlParams.PlDestApplic.MoveZero();
			HdrtrlParams.PlDataType.Value = 'R';
			SubProg.Value = "HDRTRL";
			Method.Call(Type.GetType( $"{typeof(Brdmvs).Namespace}.{SubProg.Value}").GetProperty("Instance").GetValue(Type.GetType( $"{typeof(Brdmvs).Namespace}.{SubProg.Value}")), HdrtrlParams.Value, ReportLine.Value);

			if (HdrtrlParams.PlRetdStatus.Value == 0)
			{
				ReportLine.Value = new string(' ', 133);
				CountersAndTotals.PageCount.MoveZero();
				BrdmvsCompatibility.GoTo(_09200Exit);
				return;
			}

			Console.WriteLine("BAD RETURN CODE FROM HDRTRL, STATUS: " + HdrtrlParams.PlRetdStatus.StringValue);

			switch (HdrtrlParams.PlRetdStatus.Value)
			{
			case 001:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbOpenEr.Value;
				Console.WriteLine("BAD OPEN");
				break;

			case 002:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbStartEr.Value;
				Console.WriteLine("BAD START");
				break;

			case 003:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbReadEr.Value;
				Console.WriteLine("BAD READ");
				break;

			case 004:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbBadParam.Value;
				Console.WriteLine("BAD PARAM");
				break;

			case 005:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbCloseEr.Value;
				Console.WriteLine("BAD CLOSE");
				break;

			case 006:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbDdMissing.Value;
				Console.WriteLine("DD MISSING");
				break;

			case 007:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbDdnameEr.Value;
				Console.WriteLine("BAD DDNAME");
				break;

			case 010:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbOpenEr.Value;
				Console.WriteLine("BAD OPEN");
				break;

			case 011:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbCloseEr.Value;
				Console.WriteLine("BAD CLOSE");
				break;

			case 012:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbStartEr.Value;
				Console.WriteLine("BAD START");
				break;

			case 013:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbBadParam.Value;
				Console.WriteLine("BAD PARAM");
				break;

			case 014:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbReadEr.Value;
				Console.WriteLine("BAD READ");
				break;

			case 015:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbNoRecord.Value;
				Console.WriteLine("NO RECORD");
				break;

			case 016:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbNoMatch.Value;
				Console.WriteLine("NO MATCH FOR APPL: " + HdrtrlParams.PlApplrptCode.Value);
				ErrorVarText.Value = ("APPLIC " + "|" + HdrtrlParams.PlApplrptCode.Value + "|").PadRight(50, ' ').Substring(0, 50);
				break;

			case 017:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbNoMatch.Value;
				Console.WriteLine("NO MATCH FOR REPORT: " + HdrtrlParams.PlApplrptCode.Value);
				ErrorVarText.Value = ("REPORT " + "|" + HdrtrlParams.PlApplrptCode.Value + "|").PadRight(50, ' ').Substring(0, 50);
				break;

			case 018:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbUnitMissing.Value;
				Console.WriteLine("UNIT MISSING");
				break;

			case 031:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbUnitMissing.Value;
				Console.WriteLine("UNIT MISSING");
				break;

			case 035:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbReadGeninfo.Value;
				Console.WriteLine("READ GENINFO");
				break;

			case 037:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbReadGeninfo.Value;
				Console.WriteLine("READ GENINFO");
				break;

			case 039:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbCloseGeninfo.Value;
				Console.WriteLine("CLOSE GENINFO");
				break;

			default:
				ErrorCode.ErrorMsgNum.Value = EditErrors.HeaderTrailerErrors.HudhtbUnknownEr.Value;
				Console.WriteLine("UNKNOWN ERROR");
				ErrorVarText.Value = HdrtrlParams.PlRetdStatus.ToString().Split(new string[] { "|" }, StringSplitOptions.None)[0];
				break;
			}

			if (HdrtrlParams.PlRetdStatus.Value > 000 && HdrtrlParams.PlRetdStatus.Value < 007)
			{
				ErrorFileName.Value = "RPTDEF  ";
			}
			else
			{
				ErrorFileName.Value = "RPTREQ  ";
			}

			BrdmvsCompatibility.PerformThru(this, "_9500HuerwrErrorRtn", "_9500Exit");
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _09200Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _09400Db2Error()
		{
			/*
			      *
			           */
			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("09400-DB2-ERROR");
			}

			/*
			      *

			           */
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _09400Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _9500HuerwrErrorRtn()
		{
			/*
			      *
			           */
			Console.WriteLine("PANO-ENTRY (PA1)" + Ss99PanoTable.PanoEntry[Pa1.Value - 1].Value);
			Console.WriteLine("PA1=" + Pa1.StringValue);

			if (TraceSwitch.Value == 'Y')
			{
				Console.WriteLine("9500-HUERWR-ERROR-RTN");
			}

			/*
			      *
			           */
			ErrorPgmName.Value = "BRDMVS";
			ErrorCode.ErrorSystemName.Value = "BR";
			ErrorCompletionCode.Value = +0;

			if (string.Compare(ErrorUnitNumTable.ErrorUnitNumRdef.ErrorUnitWhole.Value, "NONE") == 0)
			{
			}
			else
			{
				ErrorUnitNumTable.ErrorUnitNum.Value = Filler90.AsZoneHospitalControl.AsZoneAllHosps.AsZoneHospTable[MiscWsFields.Sub.Value==0? MiscWsFields.Sub.Value: MiscWsFields.Sub.Value - 1].AsZoneHospNumb.Value.ToString();
			}

			SubProg.Value = "BRERWR";
			Method.Call(Type.GetType( $"{typeof(Brdmvs).Namespace}.{SubProg.Value}").GetProperty("Instance").GetValue(Type.GetType( $"{typeof(Brdmvs).Namespace}.{SubProg.Value}")), ErrorCode.Value, ErrorFileName.Value, ErrorPgmName.Value, ErrorUnitNumTable.Value, ErrorVarText.Value, ErrorCompletionCode.Value);
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _9500Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _9999CloseFiles()
		{
			Console.WriteLine(" ");
			BrdmvsCompatibility.CallNextMethod(this, true);
		}
		private void _9999Exit()
		{
			BrdmvsCompatibility.CallNextMethod(this, true);
		}

        private class DclbrbpgmType
        {
            public DclbrbpgmType()
            {
            }
        }

        private class DclbrbadrType
        {
            public DclbrbadrType()
            {
            }
        }

        private class AccPatSsno
        {
            public static int value { get; set; }
        }

        private class FinDailyCareChg
        {
			public static string value { get; set; }
		}

        private class DclbrbdemType
        {
            public DclbrbdemType()
            {
            }
        }

        private class DclbrbmbhType
        {
            public DclbrbmbhType()
            {
            }
        }

        private class DxsDiagCdType
        {
            public DxsDiagCdType()
            {
            }
        }

        private class DxsIcdVersionIndType
        {
            public DxsIcdVersionIndType()
            {
            }
        }

        private class DclbrbnfcType
        {
            public DclbrbnfcType()
            {
            }
        }
    }

    internal class AccPatName
    {
    }
	internal class DclbrbmedType
	{
	}
	internal class DclbrbdxsType
	{
	}


	internal class DclbrbfinType
    {
        public DclbrbfinType()
        {
        }
    }

    internal class DclbrbaccType
    {
        public DclbrbaccType()
        {
        }
    }
}
