/// <summary>
/// Generated by (c) Ispirer SQLWays 8.0 Build 5503 64bit Licensed to ispirer
/// Timestamp: Thu Sep 20 11:53:38 2018
/// </summary>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace AdditionalClasses
{
    public enum FileDescriptionAccessModes
    {
        SequentialAccess = 256,
        DynamicAccess,
        RandomAccess
    }

    public interface IFileRepository
    {
        void OpenToRead();
        void OpenToWrite(bool append = false);
        void Close();
        void Delete();
        string Read(int recordLength);
        void Write(string Value);
        void Update();
        FileDescriptionResult Start();
    }

    public interface IFileSequential
    {
        FileDescriptionResult ReadNext();
        FileDescriptionResult StartFromKey(string whereCondition);
    }


    public enum FileDescriptionTypes
    {
        LineSequential = 0,
        Sequential = 1,
        Indexed = 2,
        RecordSequential = 3,
        Relative = 4
    }

    public class FileDescription : IFileRepository
    {
        #region Field
        public string Filename;
        public FileDescriptionResult fdr;
        StreamReader _strReader;
        StreamWriter _strWriter;
        TextReader _txtReader;
        TextWriter _txtWriter;
        int _createFlags = 0;
        #endregion

        #region Property
        public int Length
        {
            get; set;
        }
        public Record DataRecord
        {
            get; set;
        }
        public bool AtEnd
        {
            get; private set;
        }
        public int Status
        {
            get; private set;
        }
        #endregion

        #region Constructor
        public FileDescription(string fileName, FileDescriptionTypes createFlags, string[] keys = null)
        {
            Filename = fileName;
            AtEnd = false;
            _createFlags = (int)createFlags;
            fdr = new FileDescriptionResult();
        }
        #endregion

        #region Method

        public string Read(int recordLength)
        {
            string result;
            char[] buffer = new char[recordLength];
            int count;
            count = _txtReader.Read(buffer, 0, recordLength);
            result = new string(buffer);
            _txtReader.Read(buffer, 0, 2);
            if (count < Length && _strReader.EndOfStream)
            {
                AtEnd = true;
            }
            fdr = new FileDescriptionResult(true, AtEnd);
            return result;
        }

        public void Write(string Value)
        {
            _txtWriter.WriteLine(Value);
        }

        public void OpenToRead()
        {
            if (!string.IsNullOrEmpty(Filename))
            {
                string path = Filename.IndexOf(":\\") != -1 ? Filename : "../../" + Filename;
                _strReader = new StreamReader(path);
                _txtReader = TextReader.Synchronized(_strReader);
                //return _txtReader;
            }
        }

        public void OpenToWrite(bool append = false)
        {
            string path = Filename.IndexOf(":\\") != -1 ? Filename : "../../" + Filename;
            _strWriter = new StreamWriter(path, append);
            _txtWriter = TextWriter.Synchronized(_strWriter);
            //return _txtWriter;
        }

        public FileDescriptionResult Start()
        {
            return new FileDescriptionResult(false, this.AtEnd);
        }
        public void Update()
        {
        }
        public void Delete()
        {
            string buffer = _strWriter.ToString();
            _strWriter.Flush();
            buffer = buffer.Replace(DataRecord.Value, "");
            _strWriter.Write(DataRecord.Value);
        }

        public void Close()
        {
            if (_txtReader != null)
            {
                _txtReader.Close();
                _txtReader.Dispose();
                _txtReader = null;
            }
            if (_strReader != null)
            {
                _strReader.Close();
                _strReader.Dispose();
                AtEnd = false;
                _strReader = null;
            }

            if (_txtWriter != null)
            {
                _txtWriter.Flush();
                _txtWriter.Close();
                _txtWriter.Dispose();
                _txtWriter = null;
            }
            if (_strWriter != null)
            {
                _strWriter.Close();
                _strWriter.Dispose();
                _strWriter = null;
            }
        }
        #endregion
    }
}